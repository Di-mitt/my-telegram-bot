# bot.py
from __future__ import annotations

import os
import logging
import asyncio
import threading
import signal
from typing import Optional

from flask import Flask, request, abort
from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# -------------------- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --------------------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# -------------------- –æ–∫—Ä—É–∂–µ–Ω–∏–µ --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://my-telegram-bot-cr3q.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Env BOT_TOKEN and APP_URL must be set")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# -------------------- Flask --------------------
app_flask = Flask(__name__)

# -------------------- PTB state --------------------
_app: Optional[Application] = None
_loop: asyncio.AbstractEventLoop = asyncio.new_event_loop()

_app_ready = threading.Event()   # PTB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω
_stopping = threading.Event()    # –ø—Ä–æ—Ü–µ—Å—Å —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è, –∞–ø–¥–µ–π—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º ¬´–≤ –±—É—Ñ–µ—Ä¬ª

# -------------------- handlers --------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.text:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")

# -------------------- helpers --------------------
def _enqueue_update_safe(data: dict) -> None:
    """–ü–æ–ª–æ–∂–∏—Ç—å Update –≤ –æ—á–µ—Ä–µ–¥—å PTB –∏–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –ø–æ—Ç–æ–∫–∞ (Flask)."""
    upd = Update.de_json(data, _app.bot)  # type: ignore[arg-type]
    fut = asyncio.run_coroutine_threadsafe(_app.update_queue.put(upd), _loop)  # type: ignore[union-attr]
    fut.result(timeout=1.0)

# -------------------- PTB background thread --------------------
async def _ptb_main() -> None:
    """–°–æ–∑–¥–∞—ë—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç PTB; —Å—Ç–∞–≤–∏—Ç –≤–µ–±—Ö—É–∫; –¥–µ—Ä–∂–∏—Ç —Ü–∏–∫–ª –∂–∏–≤—ã–º."""
    global _app

    log.info("PTB: building application...")
    _app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .build()
    )

    _app.add_handler(CommandHandler("start", cmd_start))
    _app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    await _app.initialize()
    await _app.start()

    # –æ—Ç–º–µ—á–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –°–†–ê–ó–£ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —è–¥—Ä–∞
    _app_ready.set()

    # —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫
    log.info("PTB: setting webhook to %s", WEBHOOK_URL)
    await _app.bot.delete_webhook(drop_pending_updates=True)
    await _app.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
    log.info("PTB: webhook is set")

    # –¥–µ—Ä–∂–∏–º –∂–∏–≤—ã–º, –ø–æ–∫–∞ –Ω–µ –ø–æ–ø—Ä–æ—Å—è—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
    await asyncio.Event().wait()

def _ptb_thread_runner() -> None:
    asyncio.set_event_loop(_loop)
    try:
        _loop.run_until_complete(_ptb_main())
    except Exception:
        log.exception("PTB thread crashed")
    finally:
        try:
            if _app:
                _loop.run_until_complete(_app.stop())
        except Exception:
            pass
        try:
            _loop.close()
        except Exception:
            pass

# —Å—Ç–∞—Ä—Ç—É–µ–º PTB –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è (–∫–æ–≥–¥–∞ gunicorn –≤–æ—Ä–∫–µ—Ä –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è)
threading.Thread(target=_ptb_thread_runner, name="ptb-loop", daemon=True).start()

# -------------------- graceful shutdown --------------------
def _on_term(signum, frame):
    _stopping.set()
    log.info("Got signal %s, stopping gracefully...", signum)

signal.signal(signal.SIGTERM, _on_term)
signal.signal(signal.SIGINT, _on_term)

# -------------------- Flask routes --------------------
@app_flask.get("/")
def health() -> tuple[str, int]:
    return "OK", 200

@app_flask.post(WEBHOOK_PATH)
def webhook_receiver():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return abort(403)

    if _stopping.is_set():
        # –ò–Ω—Å—Ç–∞–Ω—Å —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º 200, —á—Ç–æ–±—ã TG –Ω–µ —Ä–µ—Ç—Ä–∞–π–ª,
        # –∏ –Ω–µ –±—É—Ñ–µ—Ä–∏–º (–±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ—Ç–µ—Ä—è–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ).
        return "ok", 200

    try:
        data = request.get_json(force=True, silent=False)
    except Exception:
        log.exception("Bad JSON in webhook")
        return "ok", 200
    if not data:
        return "ok", 200

    # –ï—Å–ª–∏ PTB —É–∂–µ –ø–æ–¥–Ω—è—Ç ‚Äî –∫–ª–∞–¥—ë–º —Å—Ä–∞–∑—É
    if _app is not None and _app_ready.is_set():
        try:
            _enqueue_update_safe(data)
        except Exception:
            log.exception("enqueue failed")
        return "ok", 200

    # –ò–Ω–∞—á–µ –ø–æ–¥–æ–∂–¥—ë–º –¥–æ 5 —Å–µ–∫ —Å—Ç–∞—Ä—Ç–∞ PTB
    if _app_ready.wait(timeout=5.0) and _app is not None:
        try:
            _enqueue_update_safe(data)
        except Exception:
            log.exception("enqueue after wait failed")
        return "ok", 200

    # –ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–ª–∏ –ø–æ–¥–Ω—è—Ç—å—Å—è ‚Äî –Ω–µ –±—É—Ñ–µ—Ä–∏–º (–∏–Ω–∞—á–µ –ø–æ—Ç–µ—Ä—è–µ–º –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ),
    # –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º 200 –∏ –ª–æ–≥–∏—Ä—É–µ–º.
    log.warning("Dropped update while PTB not ready (no-buffer mode)")
    return "ok", 200

# -------------------- –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ --------------------
if __name__ == "__main__":
    app_flask.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
