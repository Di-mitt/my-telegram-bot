# bot.py
from __future__ import annotations

import asyncio
import logging
import os
from collections import deque
from typing import Deque, Dict, Optional

from flask import Flask, request, abort

from telegram import Update, Bot
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ----------------- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ -----------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("bot")

# ----------------- env -----------------
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
APP_URL = os.getenv("APP_URL")      # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://my-telegram-bot-xxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# ----------------- Flask app -----------------
app_flask = Flask(__name__)

# ----------------- PTB app + —Å–æ—Å—Ç–æ—è–Ω–∏–µ -----------------
app_tg: Optional[Application] = None
_ptb_ready: bool = False

# –ë—É—Ñ–µ—Ä –≤—Ö–æ–¥—è—â–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤, –ø–æ–∫–∞ PTB –Ω–µ –≥–æ—Ç–æ–≤
BUFFER_MAX = 200
buffered_updates: Deque[Dict] = deque(maxlen=BUFFER_MAX)


# ----------------- handlers -----------------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.text:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")


# ----------------- —Å–ª—É–∂–µ–±–Ω–æ–µ: –∑–∞–ø—É—Å–∫ PTB –≤ —Ñ–æ–Ω–µ -----------------
async def _runner() -> None:
    """
    –ü–æ–¥–Ω–∏–º–∞–µ–º PTB –±–µ–∑ –µ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–æ–Ω –Ω–∞–º –Ω–µ –Ω—É–∂–µ–Ω ‚Äî –≤–µ–±—Ö—É–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç Flask).
    –ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ –∏ –ø–æ–º–µ—á–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ –≥–æ—Ç–æ–≤–æ–µ.
    –ó–∞—Ç–µ–º ¬´–ø—Ä–æ–≥–ª–∞—Ç—ã–≤–∞–µ–º¬ª –±—É—Ñ–µ—Ä —Ä–∞–Ω–Ω–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤.
    """
    global app_tg, _ptb_ready

    app_tg = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .build()
    )

    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    app_tg.add_handler(CommandHandler("start", start_cmd))
    app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ PTB
    await app_tg.initialize()
    await app_tg.start()
    log.info("PTB application is up")

    # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ c —Å–µ–∫—Ä–µ—Ç–æ–º (–∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ)
    await app_tg.bot.delete_webhook(drop_pending_updates=False)
    await app_tg.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
    log.info("Webhook set to %s", WEBHOOK_URL)

    # –û—Ç–º–µ—á–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏ –¥—Ä–µ–Ω–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä
    _ptb_ready = True
    await _drain_buffer()

    # –î–µ—Ä–∂–∏–º –∑–∞–¥–∞—á—É –∂–∏–≤–æ–π
    await asyncio.Event().wait()


async def _drain_buffer() -> None:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ JSON ‚Üí Update –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å PTB."""
    if not app_tg:
        return
    drained = 0
    while buffered_updates:
        raw = buffered_updates.popleft()
        try:
            upd = Update.de_json(raw, app_tg.bot)
            app_tg.update_queue.put_nowait(upd)
            drained += 1
        except Exception:  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –Ω–µ —Ä–æ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            log.exception("Failed to inject buffered update")
    if drained:
        log.info("Drained %s buffered update(s)", drained)


def _ensure_ptb_background_started() -> None:
    """–°—Ç–∞—Ä—Ç—É–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É PTB –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º HTTP-–∑–∞–ø—Ä–æ—Å–µ."""
    if getattr(_ensure_ptb_background_started, "_started", False):
        return
    loop = asyncio.new_event_loop()

    def _bg():
        try:
            loop.run_until_complete(_runner())
        finally:
            loop.close()

    import threading
    t = threading.Thread(target=_bg, name="ptb-runner", daemon=True)
    t.start()
    setattr(_ensure_ptb_background_started, "_started", True)


# ----------------- Flask routes -----------------
@app_flask.route("/", methods=["GET"])
def health() -> tuple[str, int]:
    # –ó–∞–ø—É—Å–∫–∞–µ–º PTB –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ (Render –¥–µ–ª–∞–µ—Ç HEAD/GET –Ω–∞ health)
    _ensure_ptb_background_started()
    return "OK", 200


@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook() -> tuple[str, int]:
    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ PTB (–Ω–∞ –≤—Å—è–∫–∏–π)
    _ensure_ptb_background_started()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != WEBHOOK_SECRET:
        return abort(403)

    data = request.get_json(silent=True, force=True) or {}
    log.info("Webhook JSON: %s", data)

    # –ï—Å–ª–∏ PTB –µ—â—ë —Å—Ç–∞—Ä—Ç—É–µ—Ç ‚Äî –±—É—Ñ–µ—Ä–∏–∑—É–µ–º
    if not _ptb_ready or not app_tg:
        buffered_updates.append(data)
        log.warning("Received update while PTB not ready yet (buffer=%d)", len(buffered_updates))
        return "ok", 200

    # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –≤ –æ—á–µ—Ä–µ–¥—å PTB
    try:
        upd = Update.de_json(data, app_tg.bot)
        app_tg.update_queue.put_nowait(upd)
    except Exception:
        log.exception("Failed to enqueue update")
    return "ok", 200


# ----------------- –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ -----------------
if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: Flask + —Ñ–æ–Ω–æ–≤—ã–π PTB
    _ensure_ptb_background_started()
    app_flask.run("0.0.0.0", port=int(os.environ.get("PORT", 10000)))
    
