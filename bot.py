# bot.py
from __future__ import annotations

import os
import time
import asyncio
import logging
import threading
from typing import Optional, Deque
from collections import deque

from flask import Flask, request, abort
from telegram import Update, Bot
from telegram.ext import (
    Application, ApplicationBuilder,
    CommandHandler, MessageHandler,
    ContextTypes, filters,
)
from telegram.error import RetryAfter

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–û–ì–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–ö–†–£–ñ–ï–ù–ò–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")                           # –Ω–∞–ø—Ä.: https://my-telegram-bot-xxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL  = f"{APP_URL}{WEBHOOK_PATH}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ì–õ–û–ë–ê–õ–¨–ù–´–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app_flask = Flask(__name__)
app_tg: Optional[Application] = None                 # PTB-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ —Ñ–æ–Ω–µ)

_pending_lock = threading.Lock()
_pending_updates: Deque[dict] = deque()              # –±—É—Ñ–µ—Ä –∞–ø–¥–µ–π—Ç–æ–≤, –ø–æ–∫–∞ –±–æ—Ç –Ω–µ –≥–æ—Ç–æ–≤
_stop_event = threading.Event()                      # –Ω–∞ —Å–ª—É—á–∞–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HANDLERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –Ω–∞ Render –∏ –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.text:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HEALTH ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app_flask.route("/", methods=["GET"])
def health() -> tuple[str, int]:
    return "OK", 200

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ WEBHOOK (Flask) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook_handler():
    # 1) —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç Telegram
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return abort(403)

    # 2) —á–∏—Ç–∞–µ–º JSON
    try:
        data = request.get_json(force=True, silent=False)
    except Exception:
        log.exception("Cannot parse webhook JSON")
        return "ok", 200
    if not data:
        return "ok", 200

    # 3) –µ—Å–ª–∏ PTB —É–∂–µ –ø–æ–¥–Ω—è—Ç ‚Äî —Å—Ä–∞–∑—É –≤ –æ—á–µ—Ä–µ–¥—å PTB (–±–µ–∑ –±—É—Ñ–µ—Ä–∞)
    if app_tg is not None:
        try:
            upd = Update.de_json(data, app_tg.bot)
            app_tg.update_queue.put_nowait(upd)
            return "ok", 200
        except Exception:
            log.exception("Failed to enqueue live update")
            return "ok", 200

    # 4) –∏–Ω–∞—á–µ ‚Äî –±—É—Ñ–µ—Ä–∏–∑—É–µ–º (–∏ —Ñ–ª–∞—à–µ—Ä —Å–∞–º –ø–µ—Ä–µ–ª—å—ë—Ç –ø–æ–∑–∂–µ)
    with _pending_lock:
        _pending_updates.append(data)
        q = len(_pending_updates)
    if q % 5 == 0:  # –ø–æ—Ä–µ–∂–µ —Å–ø–∞–º–∏—Ç—å –ª–æ–≥–∏
        log.warning("Buffered updates while bot not ready (queue=%d)", q)
    return "ok", 200

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–°–¢–ê–ù–û–í–ö–ê –í–ï–ë–•–£–ö–ê (—Å —Ä–µ—Ç—Ä–∞—è–º–∏) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _set_webhook_with_retries() -> None:
    bot = Bot(BOT_TOKEN)
    for attempt in range(5):
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            await bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
            log.info("Webhook set to %s", WEBHOOK_URL)
            return
        except RetryAfter as e:
            wait_s = int(getattr(e, "retry_after", 1)) + 1
            log.warning("Rate limited on setWebhook. Retry in %s s (attempt %s/5)", wait_s, attempt + 1)
            await asyncio.sleep(wait_s)
        except Exception:
            log.exception("Failed to set webhook (attempt %s/5)", attempt + 1)
            await asyncio.sleep(2)
    log.error("Giving up setting webhook after 5 attempts")

def _start_webhook_setter_thread() -> None:
    def _runner():
        # –¥–∞–¥–∏–º gunicorn/Flask –ø–æ–¥–Ω—è—Ç—å –ø–æ—Ä—Ç
        time.sleep(2)
        try:
            asyncio.run(_set_webhook_with_retries())
        except Exception:
            log.exception("Webhook setter crashed")
    threading.Thread(target=_runner, name="webhook-setter", daemon=True).start()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–û–î–™–Å–ú PTB (–±–µ–∑ run_webhook/polling) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _async_ptb_main() -> None:
    """–°–æ–∑–¥–∞—ë–º Application, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ –∏ –¥–µ—Ä–∂–∏–º —Ü–∏–∫–ª –∂–∏–≤—ã–º."""
    global app_tg

    application = ApplicationBuilder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start_cmd))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    await application.initialize()
    await application.start()

    app_tg = application  # —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–ª–∏–≤–∞—Ç—å –±—É—Ñ–µ—Ä

    # –¥–µ—Ä–∂–∏–º –∂–∏–≤—ã–º; PTB —Å–∞–º —Å–ª—É—à–∞–µ—Ç update_queue
    try:
        while not _stop_event.is_set():
            await asyncio.sleep(3600)
    finally:
        await application.stop()
        await application.shutdown()

def _start_ptb_thread() -> None:
    def _runner():
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(_async_ptb_main())
        except Exception:
            log.exception("PTB application crashed")
    threading.Thread(target=_runner, name="ptb-runner", daemon=True).start()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–û–°–¢–û–Ø–ù–ù–´–ô –§–õ–ê–®–ï–† –ë–£–§–ï–†–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _start_buffer_flusher() -> None:
    """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫: –∫–∞–∫ —Ç–æ–ª—å–∫–æ app_tg –≥–æ—Ç–æ–≤, –ø–µ—Ä–µ–ª–µ–π –≤—Å—ë –∏–∑ –±—É—Ñ–µ—Ä–∞.
       –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ: –Ω–∞ —Å–ª—É—á–∞–π –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ PTB.
    """
    def _runner():
        while not _stop_event.is_set():
            if app_tg is not None:
                try:
                    # –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–ª–∏–≤–∞–µ–º –≤—Å—ë, —á—Ç–æ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å
                    batch: list[dict] = []
                    with _pending_lock:
                        while _pending_updates:
                            batch.append(_pending_updates.popleft())
                    for data in batch:
                        try:
                            upd = Update.de_json(data, app_tg.bot)
                            app_tg.update_queue.put_nowait(upd)
                        except Exception:
                            log.exception("Failed to enqueue buffered update")
                except Exception:
                    log.exception("Buffer flusher loop error")
            time.sleep(0.2)  # 200 –º—Å –º–µ–∂–¥—É –ø—Ä–æ—Ö–æ–¥–∞–º–∏
    threading.Thread(target=_runner, name="buffer-flusher", daemon=True).start()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–¢–ê–†–¢ –ü–†–ò –ò–ú–ü–û–†–¢–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_start_ptb_thread()
_start_webhook_setter_thread()
_start_buffer_flusher()
