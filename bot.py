# bot.py
from __future__ import annotations

import asyncio
import logging
import os
import threading
from typing import Optional

from flask import Flask, request, abort

from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# =============== –õ–û–ì–ò ==================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("bot")

# =============== ENV ===================
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://my-telegram-bot-xxxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# =============== FLASK =================
app_flask = Flask(__name__)

# PTB app –∏ —Ñ–ª–∞–∂–æ–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
app_tg: Optional[Application] = None
_app_ready = asyncio.Event()


# =============== HANDLERS ==============
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!")

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–æ—Ç –∂–∏–≤\n"
        "/help ‚Äî —ç—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞\n\n"
        "–ò –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–≤–µ—á—É üòâ"
    )

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    txt = update.message.text.strip()
    await update.message.reply_text(f"–¢—ã —Å–∫–∞–∑–∞–ª: ‚Äú{txt}‚Äù. –Ø —Ç–µ–±—è —Å–ª—ã—à—É üëÇ")


# =============== PTB RUNNER ============
async def _ptb_runner(application: Application) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ PTB –≤ —Ñ–æ–Ω–µ (–±–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ HTTP-—Å–µ—Ä–≤–µ—Ä–∞)."""
    await application.initialize()
    await application.start()
    _app_ready.set()  # —Ç–µ–ø–µ—Ä—å –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã –∏–∑ –≤–µ–±—Ö—É–∫–∞
    log.info("PTB application is up")

    # –¥–µ—Ä–∂–∏–º –∑–∞–¥–∞—á—É ¬´–≤–µ—á–Ω–æ¬ª
    await asyncio.Event().wait()


def _start_ptb_in_thread() -> None:
    """–°–æ–∑–¥–∞—Ç—å Application, –Ω–∞–≤–µ—Å–∏—Ç—å —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    global app_tg

    application = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .build()
    )

    # –•–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("help", cmd_help))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    app_tg = application

    # —Ñ–æ–Ω–æ–≤–∞—è –ø–µ—Ç–ª—è
    def _run():
        asyncio.run(_ptb_runner(application))

    threading.Thread(target=_run, daemon=True, name="ptb-runner").start()


# =============== WEBHOOK SETUP =========
async def _ensure_webhook_once() -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ –∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)."""
    if not app_tg:
        return
    try:
        await app_tg.bot.delete_webhook(drop_pending_updates=True)
        await app_tg.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
        log.info("Webhook set to %s", WEBHOOK_URL)
    except Exception:
        log.exception("Failed to set webhook")


def _kick_webhook_setup() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ–±—Ö—É–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç."""
    async def _runner():
        # –ø–æ–¥–æ–∂–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PTB, —á—Ç–æ–±—ã –±—ã–ª bot-—Å–µ—Å—Å–∏—è
        await _app_ready.wait()
        await _ensure_webhook_once()

    threading.Thread(target=lambda: asyncio.run(_runner()), daemon=True).start()


# =============== FLASK ROUTES ==========
@app_flask.get("/")
def health() -> tuple[str, int]:
    return "OK", 200


@app_flask.post(WEBHOOK_PATH)
def webhook_entry():
    """–ü—Ä–∏—ë–º –∞–ø–¥–µ–π—Ç–∞ –æ—Ç Telegram + –∑–∞—â–∏—Ç–∞ –ø–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–º—É –∑–∞–≥–æ–ª–æ–≤–∫—É."""
    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != WEBHOOK_SECRET:
        return abort(403)

    # 2) JSON –∞–ø–¥–µ–π—Ç–∞
    data = request.get_json(silent=True)
    if not data:
        return "ok", 200

    # 3) –ï—Å–ª–∏ PTB –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥—ë–º, –Ω–æ –æ—Ç–≤–µ—Ç–∏–º 200,
    #    —á—Ç–æ–±—ã –¢–µ–ª–µ–≥—Ä–∞–º –Ω–µ —Å—á–∏—Ç–∞–ª —ç—Ç–æ –æ—à–∏–±–∫–æ–π.
    if not _app_ready.is_set():
        log.warning("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ PTB –µ—â—ë –Ω–µ —Å–æ–±—Ä–∞–Ω–æ")
        return "ok", 200

    # 4) –ö–ª–∞–¥—ë–º –∞–ø–¥–µ–π—Ç –≤ –æ—á–µ—Ä–µ–¥—å PTB
    try:
        update = Update.de_json(data, app_tg.bot)
        app_tg.update_queue.put_nowait(update)
    except Exception:
        log.exception("Failed to push update to PTB")
    return "ok", 200


# =============== ENTRYPOINT ============
# –ó–∞–ø—É—Å–∫–∞–µ–º PTB –∏ —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∏–º–ø–æ—Ä—Çe –º–æ–¥—É–ª—è (–∫–æ–≥–¥–∞ Gunicorn –ø–æ–¥–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
_start_ptb_in_thread()
_kick_webhook_setup()
