# bot.py
from __future__ import annotations

import os
import json
import time
import asyncio
import logging
import threading
from typing import Optional

from flask import Flask, request, abort

from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# -------------------- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --------------------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# -------------------- –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
APP_URL = os.getenv("APP_URL")      # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://my-telegram-bot-xxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# -------------------- Flask --------------------
app_flask = Flask(__name__)

# -------------------- –ì–ª–æ–±–∞–ª—ã PTB --------------------
app_tg: Optional[Application] = None
app_ready = threading.Event()  # —Å—Ç–∞–≤–∏–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–æ–±—Ä–∞–Ω Application


# -------------------- handlers --------------------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")
    except Exception:
        log.exception("start_cmd failed")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if update.message and update.message.text:
            await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")
    except Exception:
        log.exception("echo failed")


# -------------------- PTB main --------------------
async def _ptb_main() -> None:
    """
    –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º PTB-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    –î–µ–ª–∞–µ–º set_webhook, –Ω–æ Flask –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–ø–¥–µ–π—Ç—ã —Å–∞–º.
    """
    global app_tg

    application = ApplicationBuilder().token(BOT_TOKEN).build()
    app_tg = application

    # –°—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º ¬´–≥–æ—Ç–æ–≤¬ª, —á—Ç–æ–±—ã –≤–µ–±—Ö—É–∫ –º–æ–≥ –∫–ª–∞—Å—Ç—å –∞–ø–¥–µ–π—Ç—ã –≤ –æ—á–µ—Ä–µ–¥—å,
    # –¥–∞–∂–µ –µ—Å–ª–∏ PTB –µ—â—ë —Å—Ç–∞—Ä—Ç—É–µ—Ç ‚Äî –æ–Ω–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –∫–∞–∫ —Ç–æ–ª—å–∫–æ PTB –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è.
    app_ready.set()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_cmd))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å—Ç–∞—Ä—Ç PTB
    await application.initialize()
    await application.start()

    # –°–±—Ä–æ—Å –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ —Å —Å–µ–∫—Ä–µ—Ç–æ–º
    try:
        await application.bot.delete_webhook(drop_pending_updates=True)
        await application.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
        log.info("Webhook set to %s", WEBHOOK_URL)
    except Exception:
        log.exception("Failed to set webhook")

    # –î–µ—Ä–∂–∏–º —Ü–∏–∫–ª –∂–∏–≤—ã–º
    while True:
        await asyncio.sleep(3600)


def _runner() -> None:
    """–ó–∞–ø—É—Å–∫ –∫–æ—Ä—É—Ç–∏–Ω—ã PTB –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    try:
        asyncio.run(_ptb_main())
    except Exception:
        log.exception("PTB runner crashed")


# –ó–∞–ø—É—Å–∫–∞–µ–º PTB –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è (gunicorn –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç bot:app_flask)
_thread = threading.Thread(target=_runner, name="ptb-runner", daemon=True)
_thread.start()

# -------------------- Flask routes --------------------
@app_flask.route("/", methods=["GET"])
def health() -> tuple[str, int]:
    return "OK", 200


@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook_handler():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != WEBHOOK_SECRET:
        return abort(403)

    # –ü–æ–ª—É—á–∞–µ–º JSON –∞–ø–¥–µ–π—Ç–∞
    try:
        data = request.get_json(force=True, silent=False)
    except Exception:
        log.exception("Invalid JSON in webhook")
        return "ok", 200

    # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    try:
        log.info("Webhook JSON: %s", json.dumps(data, ensure_ascii=False))
    except Exception:
        pass

    # –ï—Å–ª–∏ PTB Application —É–∂–µ —Å–æ–∑–¥–∞–Ω ‚Äî –∫–ª–∞–¥—ë–º –∞–ø–¥–µ–π—Ç –≤ –æ—á–µ—Ä–µ–¥—å
    if app_tg is not None:
        try:
            upd = Update.de_json(data, app_tg.bot)
            # NB: put_nowait –Ω–∞ asyncio.Queue –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ–±—ã—á–Ω–æ –æ–∫ –¥–ª—è PTB.
            app_tg.update_queue.put_nowait(upd)
        except Exception:
            log.exception("Failed to enqueue update")
    else:
        log.warning("Received update but PTB Application is not built yet")

    # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ —Å—á–∏—Ç–∞–ª —ç—Ç–æ –æ—à–∏–±–∫–æ–π
    return "ok", 200
