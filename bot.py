# bot.py
from __future__ import annotations

import os
import logging
import asyncio
import threading
from collections import deque
from typing import Optional, Deque, Dict, Any

from flask import Flask, request, abort

from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# -------------------- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --------------------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# -------------------- –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # –Ω–∞–ø—Ä.: https://my-telegram-bot-xxxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "change-me")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# -------------------- Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ --------------------
app_flask = Flask(__name__)

# -------------------- PTB –æ–±—ä–µ–∫—Ç—ã/—Å–æ—Å—Ç–æ—è–Ω–∏–µ --------------------
app_tg: Optional[Application] = None
_ready_evt: asyncio.Event = asyncio.Event()
_buffer: Deque[Dict[str, Any]] = deque(maxlen=100)  # –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –∞–ø–¥–µ–π—Ç–æ–≤


# -------------------- handlers --------------------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")
    except Exception:
        log.exception("Error in /start handler")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if update.message and update.message.text:
            await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")
    except Exception:
        log.exception("Error in echo handler")


# -------------------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ --------------------
def _flush_buffer_safe() -> None:
    """–ü—Ä–æ–±—É–µ–º ¬´—Å–ª–∏—Ç—å¬ª –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã –≤ –æ—á–µ—Ä–µ–¥—å PTB."""
    global app_tg
    if not (_ready_evt.is_set() and app_tg and app_tg.update_queue):
        return
    pushed = 0
    while _buffer:
        data = _buffer.popleft()
        try:
            upd = Update.de_json(data, app_tg.bot)
            app_tg.update_queue.put_nowait(upd)
            pushed += 1
        except Exception:
            log.exception("Failed to push buffered update")
    if pushed:
        log.info("Flushed %d buffered update(s) to PTB", pushed)


async def _runner() -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ–º —è–¥—Ä–æ PTB –≤ ¬´–≤–µ–±—Ö—É–∫¬ª-—Ä–µ–∂–∏–º–µ: —Å–∞–º —Å–µ—Ä–≤–µ—Ä —É –Ω–∞—Å Flask/Gunicorn,
    –∞ PTB ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ø–¥–µ–π—Ç–æ–≤.
    """
    global app_tg

    # 1) –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app_tg = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .build()
    )
    app_tg.add_handler(CommandHandler("start", start_cmd))
    app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # 2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å—Ç–∞—Ä—Ç—É–µ–º PTB
    await app_tg.initialize()
    await app_tg.start()

    # 3) –°—Ä–∞–∑—É —Å—á–∏—Ç–∞–µ–º PTB –≥–æ—Ç–æ–≤—ã–º –∏ —Å–ª–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä
    _ready_evt.set()
    _flush_buffer_safe()

    # 4) –í—ã—Å—Ç–∞–≤–ª—è–µ–º (–ø–µ—Ä–µ-)–≤–µ–±—Ö—É–∫ —É Telegram
    try:
        # –Ω–µ —á–∏—Å—Ç–∏–º pending, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Ç–æ, —á—Ç–æ —É–∂–µ –ø—Ä–∏—à–ª–æ
        await app_tg.bot.delete_webhook(drop_pending_updates=False)
        await app_tg.bot.set_webhook(
            url=WEBHOOK_URL,
            secret_token=WEBHOOK_SECRET,
        )
        log.info("Webhook set to %s", WEBHOOK_URL)
    except Exception:
        log.exception("Failed to set webhook")

    # 5) –î–µ—Ä–∂–∏–º –∑–∞–¥–∞—á—É –∂–∏–≤–æ–π, –ø–æ–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ë—Ç
    log.info("PTB application is up")
    while True:
        await asyncio.sleep(3600)


def _start_ptb_background() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º _runner() –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–±—ã—Ç–∏–π–Ω—ã–º —Ü–∏–∫–ª–æ–º."""
    def _target():
        try:
            asyncio.run(_runner())
        except Exception:
            log.exception("PTB runner crashed")

    th = threading.Thread(target=_target, daemon=True)
    th.start()


# -------------------- Flask routes --------------------
@app_flask.get("/")
def health() -> tuple[str, int]:
    return "OK", 200


@app_flask.post(WEBHOOK_PATH)
def webhook_handler():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ –æ—Ç Telegram
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != WEBHOOK_SECRET:
        return abort(403)

    try:
        data = request.get_json(force=True, silent=False)
    except Exception:
        log.exception("Invalid JSON in webhook")
        return "ok", 200

    if not data:
        return "ok", 200

    # –ï—Å–ª–∏ PTB —É–∂–µ –≥–æ—Ç–æ–≤ ‚Äî —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –µ–≥–æ –æ—á–µ—Ä–µ–¥—å,
    # –∏–Ω–∞—á–µ —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä.
    if _ready_evt.is_set() and app_tg and app_tg.update_queue:
        try:
            upd = Update.de_json(data, app_tg.bot)
            app_tg.update_queue.put_nowait(upd)
        except Exception:
            log.exception("Failed to enqueue update")
    else:
        _buffer.append(data)
        log.warning("Received update, but PTB is not ready yet (buffer=%d)", len(_buffer))

    return "ok", 200


# -------------------- entrypoint --------------------
# –ü—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è (–∫–æ–≥–¥–∞ gunicorn –ø–æ–¥–Ω–∏–º–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä) ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º PTB –≤ —Ñ–æ–Ω–µ.
_start_ptb_background()

# –ù–∏—á–µ–≥–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º ‚Äî gunicorn –±—É–¥–µ—Ç –±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç app_flask
# –∏–∑ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è: `gunicorn bot:app_flask`
