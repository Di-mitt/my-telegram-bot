# bot.py
from __future__ import annotations

import asyncio
import logging
import os
import threading
from typing import Optional

from flask import Flask, request, abort
from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# -------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --------------------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# -------------------- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # –Ω–∞–ø—Ä.: https://my-telegram-bot-xxxxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# -------------------- –ì–ª–æ–±–∞–ª—ã --------------------
app_flask = Flask(__name__)

app_tg: Optional[Application] = None
_ptb_ready = threading.Event()  # —Ñ–ª–∞–≥ ¬´PTB –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∏ –≤–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω¬ª

# -------------------- Handlers --------------------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏ –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.text:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")


# -------------------- PTB –∑–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ --------------------
async def _ptb_main() -> None:
    """–°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º PTB-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫."""
    global app_tg

    # 1) –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start_cmd))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # 2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–±–µ–∑ .run_* helpers)
    await application.initialize()
    await application.start()

    # 3) –í—ã—Å—Ç–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫ —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï —Å—Ç–∞—Ä—Ç–∞ PTB
    await application.bot.delete_webhook(drop_pending_updates=True)
    await application.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
    log.info("Webhook set to %s", WEBHOOK_URL)

    # 4) –ü–æ–º–µ—á–∞–µ–º ¬´–±–æ—Ç –≥–æ—Ç–æ–≤¬ª
    app_tg = application
    _ptb_ready.set()

    # 5) –î–µ—Ä–∂–∏–º —Ü–∏–∫–ª –∂–∏–≤—ã–º
    await asyncio.Event().wait()


def _ptb_thread_runner() -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è PTB."""
    try:
        asyncio.run(_ptb_main())
    except Exception:
        log.exception("PTB thread crashed")


# –°—Ç–∞—Ä—Ç—É–µ–º PTB-–ø–æ—Ç–æ–∫ –°–†–ê–ó–£ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è ‚Äî –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ Telegram –Ω–∞—á–Ω—ë—Ç —Å–ª–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã
_thread = threading.Thread(target=_ptb_thread_runner, daemon=True, name="ptb-thread")
_thread.start()

# -------------------- Flask –º–∞—Ä—à—Ä—É—Ç—ã --------------------
@app_flask.get("/")
def health() -> tuple[str, int]:
    return "OK", 200


@app_flask.post(WEBHOOK_PATH)
def webhook_handler():
    """–ü—Ä–∏—ë–º –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram (Flask)."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != WEBHOOK_SECRET:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–µ–º 403 (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤–∏–¥–µ—Ç—å –≤ –ª–æ–≥–∞—Ö)
        abort(403)

    # JSON –∞–ø–¥–µ–π—Ç–∞
    data = request.get_json(force=True, silent=True)
    if not data:
        return "ok", 200

    log.info("Webhook JSON: %s", data)

    # –ï—Å–ª–∏ PTB –µ—â—ë –Ω–µ —É—Å–ø–µ–ª –ø–æ–¥–Ω—è—Ç—å—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 –∏ –Ω–µ –ø–∞–Ω–∏–∫—É–µ–º
    if not _ptb_ready.is_set() or app_tg is None:
        log.warning("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ PTB –µ—â—ë –Ω–µ —Å–æ–±—Ä–∞–Ω–æ")
        return "ok", 200

    try:
        # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º JSON –≤ Update –∏ –ø–∏—Ö–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å PTB
        update = Update.de_json(data, app_tg.bot)
        app_tg.update_queue.put_nowait(update)
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—â–µ–Ω–∏–∏ –∞–ø–¥–µ–π—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å PTB")

    return "ok", 200


# -------------------- –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–µ –Ω—É–∂–µ–Ω –Ω–∞ Render) --------------------
if __name__ == "__main__":
    # –õ–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –≥–æ–Ω—è—Ç—å —Ç–∞–∫:
    #   export BOT_TOKEN=... APP_URL=http://localhost:8080
    #   python bot.py
    # –∏ —Å–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ POST-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ /webhook/<secret>
    app_flask.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
