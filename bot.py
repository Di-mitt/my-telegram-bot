# bot.py
from __future__ import annotations

import os
import time
import threading
import asyncio
import logging
from typing import Optional

from flask import Flask, request, abort
from telegram import Update, Bot
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters
)

# ---------- –õ–æ–≥–∏ ----------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# ---------- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # –Ω–∞–ø—Ä.: https://my-telegram-bot-cr3q.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL  = f"{APP_URL}{WEBHOOK_PATH}"

# ---------- Flask (WSGI) ----------
app_flask = Flask(__name__)
app_tg: Optional[Application] = None


# ---------- Handlers ----------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –∂–∏–≤—É –Ω–∞ Render –∏ –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.text:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")


# ---------- Webhook endpoints ----------
@app_flask.route("/", methods=["GET"])
def health() -> tuple[str, int]:
    return "OK", 200

@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook_handler():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return abort(403)

    data = request.get_json(force=True, silent=True)
    if not data:
        log.warning("Empty JSON in webhook")
        return "ok", 200

    if not app_tg:
        # –∫—Ä–∞–π–Ω–µ –∫–æ—Ä–æ—Ç–∫–æ–µ ¬´–æ–∫–Ω–æ¬ª, –∫–æ–≥–¥–∞ PTB –µ—â—ë –Ω–µ –ø–æ–¥–Ω—è–ª—Å—è;
        # –æ—Ç–≤–µ—á–∞–µ–º 200 ‚Äî Telegram —Å–∞–º —Ä–µ—Ç—Ä–∞–π–Ω–µ—Ç
        log.error("app_tg is not initialized yet")
        return "ok", 200

    try:
        upd = Update.de_json(data, app_tg.bot)
        app_tg.update_queue.put_nowait(upd)
    except Exception:
        log.exception("Failed to enqueue update")

    return "ok", 200


# ---------- –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ PTB ----------
async def _set_webhook_once():
    """–°—Ç–∞–≤–∏—Ç webhook —á–µ—Ä–µ–∑ Bot API (–≤–Ω–µ PTB —Ü–∏–∫–ª–∞)."""
    bot = Bot(BOT_TOKEN)
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
        log.info("Webhook set to %s", WEBHOOK_URL)
    finally:
        # –∑–∞–∫—Ä—ã–≤–∞–µ–º httpx-—Å–µ—Å—Å–∏—é
        await bot.session.close()

def _set_webhook_later():
    # –∂–¥—ë–º –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã run_webhook —É—Å–ø–µ–ª –Ω–∞—á–∞—Ç—å —Å–ª—É—à–∞—Ç—å –ø–æ—Ä—Ç
    time.sleep(2)
    try:
        asyncio.run(_set_webhook_once())
    except Exception:
        log.exception("Failed to set webhook")

def _run_bot() -> None:
    global app_tg
    try:
        log.info("Starting PTB application‚Ä¶")
        application = ApplicationBuilder().token(BOT_TOKEN).build()

        application.add_handler(CommandHandler("start", start_cmd))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

        app_tg = application

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ–±—Ö—É–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        threading.Thread(target=_set_webhook_later, daemon=True).start()

        # –í PTB 21.x —É run_webhook –Ω–µ—Ç on_startup ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–Ω–∏–º–∞–µ–º –ø—Ä–∏—ë–º–Ω–∏–∫
        application.run_webhook(
            listen="0.0.0.0",
            port=int(os.environ.get("PORT", 10000)),
            url_path=WEBHOOK_PATH,
            # webhook_url –∏ secret_token —Ç—É—Ç –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º ‚Äî –º—ã –∏—Ö —Å—Ç–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ
        )
    except Exception:
        log.exception("PTB application crashed")

# –°—Ç–∞—Ä—Ç—É–µ–º PTB –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –∫–æ–≥–¥–∞ gunicorn –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å
threading.Thread(target=_run_bot, name="ptb-runner", daemon=True).start()

# –°—Ç–∞—Ä—Ç—É–µ–º –±–æ—Ç –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è (–∫–æ–≥–¥–∞ gunicorn –ø–æ–¥–Ω–∏–º–∞–µ—Ç app_flask)
threading.Thread(target=_run_bot, name="ptb-runner", daemon=True).start()
