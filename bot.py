import os
import json
import logging
import threading
import asyncio
from collections import deque
from typing import Deque, Tuple, Optional

from flask import Flask, request, abort, Response
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")


# -------------------- ENV ---------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # https://<service>.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")
PORT = int(os.getenv("PORT", "10000"))

if not BOT_TOKEN:
    raise RuntimeError("ENV BOT_TOKEN is not set")
if not APP_URL:
    raise RuntimeError("ENV APP_URL is not set")
if not WEBHOOK_SECRET:
    raise RuntimeError("ENV WEBHOOK_SECRET is not set")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"


# -------------------- FLASK -------------------
app_flask = Flask(__name__)

# PTB runtime –æ–±—ä–µ–∫—Ç—ã
_application: Optional[Application] = None
_ptb_loop: Optional[asyncio.AbstractEventLoop] = None
_ready = threading.Event()              # —Å—Ç–∞–Ω–µ—Ç True, –∫–æ–≥–¥–∞ PTB –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤
_buffer: Deque[Tuple[dict, dict]] = deque()  # (json, headers) ‚Äî –∞–ø–¥–µ–π—Ç—ã, –ø—Ä–∏—à–µ–¥—à–∏–µ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
_buffer_lock = threading.Lock()


# -------------------- HANDLERS ----------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")


# -------------------- PTB SETUP ----------------
def build_application() -> Application:
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    return app


async def _ptb_async_runner():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ event loop.
    –ë–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç PTB –∏ —Å—Ç–∞–≤–∏—Ç –≤–µ–±—Ö—É–∫.
    """
    global _application

    log.info("PTB: building application...")
    _application = build_application()

    # –°—Ç–∞—Ä—Ç –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    await _application.initialize()
    await _application.start()

    # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫
    try:
        log.info("PTB: setting webhook to %s", WEBHOOK_URL)
        await _application.bot.delete_webhook(drop_pending_updates=False)
        await _application.bot.set_webhook(
            url=WEBHOOK_URL,
            secret_token=WEBHOOK_SECRET,
            allowed_updates=None,   # –≤—Å–µ —Ç–∏–ø—ã
        )
        log.info("PTB: webhook is set")
    except Exception:  # noqa: BLE001
        log.exception("PTB: failed to set webhook")
        raise

    # –û—Ç–º–µ—á–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å, –∑–∞—Ç–µ–º –¥–æ–≥–æ–Ω–∏–º –±—É—Ñ–µ—Ä
    _ready.set()
    _drain_buffer()

    # –î–µ—Ä–∂–∏–º —Ü–∏–∫–ª –∂–∏–≤—ã–º
    while True:
        await asyncio.sleep(3600)


def _start_ptb_thread():
    """
    –°–æ–∑–¥–∞—ë—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –∏ event loop –¥–ª—è PTB, —á—Ç–æ–±—ã
    –∏–∑ Flask –º–æ–∂–Ω–æ –±—ã–ª–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –≤ loop.
    """
    global _ptb_loop

    def _runner():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        # –∑–∞–ø–æ–º–Ω–∏–º loop, —á—Ç–æ–±—ã –ø–æ–¥–∞–≤–∞—Ç—å –≤ –Ω–µ–≥–æ –∑–∞–¥–∞—á–∏ –∏–∑ Flask
        global _ptb_loop
        _ptb_loop = loop
        try:
            loop.run_until_complete(_ptb_async_runner())
        finally:
            loop.run_until_complete(loop.shutdown_asyncgens())
            loop.close()

    th = threading.Thread(target=_runner, daemon=True, name="ptb-runner")
    th.start()


def _submit_to_ptb(coro: asyncio.Future):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ä—É—Ç–∏–Ω—É –≤ loop PTB –∏–∑ Flask-–ø–æ—Ç–æ–∫–∞.
    """
    if not _ptb_loop:
        raise RuntimeError("PTB loop is not ready")
    asyncio.run_coroutine_threadsafe(coro, _ptb_loop)


def _drain_buffer():
    """
    –ü–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PTB —Ä–∞–∑–≥—Ä–µ—Å—Ç–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.
    """
    if not _ready.is_set() or not _application:
        return
    drained = 0
    with _buffer_lock:
        while _buffer:
            data, headers = _buffer.popleft()
            try:
                update = Update.de_json(data, _application.bot)
                _submit_to_ptb(_application.process_update(update))
                drained += 1
            except Exception:  # noqa: BLE001
                log.exception("Failed to process buffered update")
    if drained:
        log.info("Buffered queue drained: %s updates", drained)


# -------------------- FLASK ROUTES -------------
@app_flask.get("/")
def health():
    return "OK", 200


@app_flask.post(WEBHOOK_PATH)
def webhook():
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Flask-—Ä–æ—É—Ç:
      1) –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
      2) –µ—Å–ª–∏ PTB –Ω–µ –≥–æ—Ç–æ–≤ ‚Äî –±—É—Ñ–µ—Ä–∏–∑—É–µ–º –∞–ø–¥–µ–π—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 (—á—Ç–æ–±—ã Telegram –Ω–µ –¥–æ–ª–±–∏–ª —Ä–µ—Ç—Ä–∞—è–º–∏)
      3) –µ—Å–ª–∏ –≥–æ—Ç–æ–≤ ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –∞–ø–¥–µ–π—Ç –≤ event loop PTB
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if not secret or secret != WEBHOOK_SECRET:
        abort(403)

    # –ü–æ–ª—É—á–∞–µ–º JSON
    try:
        data = request.get_json(force=True, silent=False)
        if not isinstance(data, dict):
            raise ValueError("Payload is not a dict")
    except Exception as e:  # noqa: BLE001
        log.warning("Bad webhook JSON: %s", e)
        return Response("bad request", status=400)

    # –ï—Å–ª–∏ PTB –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤ ‚Äî —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ –±—É—Ñ–µ—Ä
    if not _ready.is_set() or _application is None:
        with _buffer_lock:
            _buffer.append((data, dict(request.headers)))
        # 200, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª, –º—ã —Å–∞–º–∏ –¥–æ–≥–æ–Ω–∏–º –±—É—Ñ–µ—Ä
        return Response("buffered", status=200)

    # –ì–æ—Ç–æ–≤ ‚Äî —à–ª—ë–º –≤ PTB
    try:
        update = Update.de_json(data, _application.bot)
        _submit_to_ptb(_application.process_update(update))
    except Exception:  # noqa: BLE001
        log.exception("Failed to submit update to PTB")
        return Response("fail", status=500)

    return Response("ok", status=200)


# -------------------- ENTRYPOINT ----------------
# –ó–∞–ø—É—Å–∫–∞–µ–º PTB –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è,
# —á—Ç–æ–±—ã –∫ –º–æ–º–µ–Ω—Ç—É –ø—Ä–∏—Ö–æ–¥–∞ –ø–µ—Ä–≤—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ –æ–Ω —É—Å–ø–µ–ª –ø–æ–¥–Ω—è—Ç—å—Å—è.
_start_ptb_thread()

# –ù–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω–∞–¥–æ ‚Äî gunicorn –ø–æ–¥–Ω–∏–º–µ—Ç Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (app_flask)
# –∏ Render —É–≤–∏–¥–∏—Ç –ø–æ—Ä—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ gunicorn —Å–ª—É—à–∞–µ—Ç $PORT.
# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –≤ Render:  gunicorn bot:app_flask
