# bot.py
import os
import sys
import json
import logging
import threading
import atexit
import asyncio
from typing import Optional, Deque, Tuple
from collections import deque

from flask import Flask, request, jsonify, Response

from telegram import Update
from telegram.ext import (
    Application,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# -----------------------------------------------------------------------------
# –õ–û–ì–ò
# -----------------------------------------------------------------------------
LOG_LEVEL = os.environ.get("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    stream=sys.stdout,
)
log = logging.getLogger("bot")

# -----------------------------------------------------------------------------
# –ö–û–ù–§–ò–ì
# -----------------------------------------------------------------------------
BOT_TOKEN = os.environ.get("BOT_TOKEN", "").strip()
APP_URL = os.environ.get("APP_URL", "").strip().rstrip("/")
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "mySecret_2025").strip()

if not BOT_TOKEN:
    log.error("Environment variable BOT_TOKEN is not set")
    raise SystemExit(1)

if not APP_URL:
    log.warning("APP_URL not set; fallback http://0.0.0.0:10000 (local only)")
    APP_URL = "http://0.0.0.0:10000"

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# -----------------------------------------------------------------------------
# PTB: LOOP/APP/–§–õ–ê–ì–ò
# -----------------------------------------------------------------------------
_ptb_loop: Optional[asyncio.AbstractEventLoop] = None
_ptb_app: Optional[Application] = None
_ptb_ready = threading.Event()
_ptb_stop_event: Optional[asyncio.Event] = None

# -----------------------------------------------------------------------------
# –ë–£–§–ï–† –í–ï–ë–•–£–ö–ê (—á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –∞–ø–¥–µ–π—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
# -----------------------------------------------------------------------------
# –æ–≥—Ä–∞–Ω–∏—á–∏–º –±—É—Ñ–µ—Ä –ø–æ –∫–æ–ª-–≤—É, —á—Ç–æ–±—ã –Ω–µ —Å—ä–µ—Å—Ç—å –ø–∞–º—è—Ç—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫
BUFFER_MAX = int(os.environ.get("WEBHOOK_BUFFER_MAX", "50"))
_buffer_lock = threading.Lock()
_buffer: Deque[Tuple[dict, float]] = deque()  # (raw_json, timestamp)

def _buffer_push(data: dict):
    with _buffer_lock:
        while len(_buffer) >= BUFFER_MAX:
            _buffer.popleft()
        _buffer.append((data, asyncio.get_event_loop_policy().time()))
        log.warning("Webhook buffered (total=%s)", len(_buffer))

def _buffer_drain():
    """–í—ã–∑—ã–≤–∞–µ–º —É–∂–µ –ü–û–°–õ–ï —Ç–æ–≥–æ, –∫–∞–∫ PTB –≥–æ—Ç–æ–≤; –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã –≤ PTB."""
    if not (_ptb_ready.is_set() and _ptb_app and _ptb_loop):
        return
    drained = 0
    while True:
        with _buffer_lock:
            if not _buffer:
                break
            data, ts = _buffer.popleft()
        try:
            upd = Update.de_json(data, _ptb_app.bot)
            asyncio.run_coroutine_threadsafe(_ptb_app.process_update(upd), _ptb_loop)
            drained += 1
        except Exception:
            log.exception("buffer drain: failed to schedule update")
    if drained:
        log.info("Webhook buffer drained: %s updates flushed", drained)

# -----------------------------------------------------------------------------
# –•–≠–ù–î–õ–ï–†–´ –ë–û–¢–ê
# -----------------------------------------------------------------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ\n–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî —è –ø–æ–≤—Ç–æ—Ä—é.")

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /start, /help")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        await update.message.reply_text(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {update.message.text}")

# -----------------------------------------------------------------------------
# PTB ASYNC MAIN (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º event loop + –ø–æ—Ç–æ–∫)
# -----------------------------------------------------------------------------
async def _ptb_async_main():
    global _ptb_app, _ptb_stop_event

    log.info("PTB: building application...")
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    await app.initialize()
    await app.start()

    # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    try:
        await app.bot.delete_webhook()
        await app.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
        log.info("PTB: webhook set -> %s", WEBHOOK_URL)
    except Exception:
        log.exception("PTB: failed to set webhook")

    # –ì–æ—Ç–æ–≤–æ ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã
    _ptb_app = app
    _ptb_ready.set()

    # –°—Ä–∞–∑—É –ø—Ä–æ–±—É–µ–º —Å–ª–∏—Ç—å –±—É—Ñ–µ—Ä (–µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ —á—Ç–æ-—Ç–æ –≤–æ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞)
    try:
        _buffer_drain()
    except Exception:
        log.exception("buffer drain on ready failed")

    _ptb_stop_event = asyncio.Event()
    await _ptb_stop_event.wait()

    log.info("PTB: stopping...")
    try:
        await app.stop()
        await app.shutdown()
        await app.post_stop()
    except Exception:
        log.exception("PTB: stop error")

def _ptb_thread_runner():
    global _ptb_loop
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    _ptb_loop = loop
    try:
        loop.run_until_complete(_ptb_async_main())
    finally:
        try:
            pending = asyncio.all_tasks(loop)
            for t in pending:
                t.cancel()
            loop.run_until_complete(loop.shutdown_asyncgens())
        except Exception:
            pass
        loop.close()
        log.info("PTB: loop closed")

def start_ptb_background():
    t = threading.Thread(target=_ptb_thread_runner, name="ptb-runner", daemon=True)
    t.start()
    return t

def stop_ptb_background():
    if _ptb_loop and _ptb_stop_event:
        try:
            _ptb_loop.call_soon_threadsafe(_ptb_stop_event.set)
        except Exception:
            pass

# -----------------------------------------------------------------------------
# FLASK
# -----------------------------------------------------------------------------
app_flask = Flask(__name__)

@app_flask.get("/")
def root():
    return Response("ok", status=200, mimetype="text/plain")

@app_flask.get("/health")
def health():
    with _buffer_lock:
        buf_size = len(_buffer)
    return jsonify(
        status="ok",
        ptb_ready=_ptb_ready.is_set(),
        webhook_url=WEBHOOK_URL,
        buffer_size=buf_size,
        buffer_max=BUFFER_MAX,
    )

@app_flask.post(WEBHOOK_PATH)
def telegram_webhook():
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token", "")
    if secret != WEBHOOK_SECRET:
        log.warning("Webhook: secret mismatch")
        return ("", 403)

    data = request.get_json(silent=True, force=True) or {}

    # –µ—Å–ª–∏ PTB –Ω–µ –≥–æ—Ç–æ–≤ ‚Äî –∫–ª–∞–¥–µ–º –≤ –±—É—Ñ–µ—Ä –∏ 200
    if not _ptb_ready.is_set() or _ptb_app is None or _ptb_loop is None:
        log.warning("Webhook: got update while PTB not ready -> buffer")
        _buffer_push(data)
        return ("", 200)

    # PTB –≥–æ—Ç–æ–≤ ‚Äî —Å—Ä–∞–∑—É –æ—Ç–¥–∞–µ–º
    try:
        update = Update.de_json(data, _ptb_app.bot)
        asyncio.run_coroutine_threadsafe(_ptb_app.process_update(update), _ptb_loop)
    except Exception:
        log.exception("Webhook: failed to schedule update")
    return ("", 200)

# –∞–¥–º–∏–Ω–∫–∞: —Ä—É—á–Ω–æ–π —Ä–µ—Å–µ—Ç –≤–µ–±—Ö—É–∫–∞ –∏ —Å–ª–∏–≤ –±—É—Ñ–µ—Ä–∞
@app_flask.post("/admin/reset_webhook")
def reset_webhook():
    if not (_ptb_ready.is_set() and _ptb_app and _ptb_loop):
        return jsonify(ok=False, error="PTB not ready"), 503

    async def _reset():
        await _ptb_app.bot.delete_webhook()
        await _ptb_app.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)

    try:
        fut = asyncio.run_coroutine_threadsafe(_reset(), _ptb_loop)
        fut.result(timeout=5)
        return jsonify(ok=True, url=WEBHOOK_URL)
    except Exception as e:
        log.exception("reset_webhook failed")
        return jsonify(ok=False, error=str(e)), 500

@app_flask.post("/admin/flush_buffer")
def flush_buffer():
    try:
        _buffer_drain()
        with _buffer_lock:
            left = len(_buffer)
        return jsonify(ok=True, left=left)
    except Exception as e:
        log.exception("manual buffer flush failed")
        return jsonify(ok=False, error=str(e)), 500

# -----------------------------------------------------------------------------
# –°–¢–ê–†–¢ PTB –í –§–û–ù–ï
# -----------------------------------------------------------------------------
_ptb_thread = start_ptb_background()

@atexit.register
def _graceful_shutdown():
    stop_ptb_background()
