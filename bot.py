# bot.py
from __future__ import annotations

import json
import logging
import os
import threading
import time
from typing import Optional

from flask import Flask, request, abort
from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ================== –õ–û–ì–ò ==================
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# ================== ENV ==================
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
APP_URL = os.getenv("APP_URL")      # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä https://my-telegram-bot-xxxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set environment vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# ================== Flask ==================
app_flask = Flask(__name__)

# ================== PTB (python-telegram-bot) ==================
application: Optional[Application] = None
ptb_ready = threading.Event()  # —Ñ–ª–∞–≥ ¬´PTB –∑–∞–ø—É—â–µ–Ω –∏ –≤–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω¬ª


# --- handlers ---
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.text:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")


def _run_ptb() -> None:
    """–ó–∞–ø—É—Å–∫ PTB –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ:
    1) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    2) —Å—Ç–∞—Ä—Ç
    3) —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    4) –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ptb_ready
    """
    global application
    try:
        log.info("PTB thread: building Application...")
        application = (
            ApplicationBuilder()
            .token(BOT_TOKEN)
            .build()
        )

        # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", cmd_start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

        # –∑–∞–ø—É—Å–∫–∞–µ–º —è–¥—Ä–æ PTB (–±–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞)
        log.info("PTB thread: initialize & start...")
        application.initialize()
        application.start()
        log.info("PTB thread: Application started")

        # –≤—ã—Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï —Å—Ç–∞—Ä—Ç–∞ —è–¥—Ä–∞ PTB
        log.info("PTB thread: set webhook -> %s", WEBHOOK_URL)
        # —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—ã–π
        application.bot.delete_webhook(drop_pending_updates=True).result()
        # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π
        application.bot.set_webhook(
            url=WEBHOOK_URL,
            secret_token=WEBHOOK_SECRET,
        ).result()

        # —Ç–µ–ø–µ—Ä—å PTB –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã
        ptb_ready.set()
        log.info("PTB thread: webhook set. Ready to accept updates.")

        # –¥–µ—Ä–∂–∏–º –ø–æ—Ç–æ–∫ ¬´–∂–∏–≤—ã–º¬ª, –ø–æ–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
        # (PTB –≤–Ω—É—Ç—Ä–∏ –∫—Ä—É—Ç–∏—Ç —Å–≤–æ–∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏)
        while True:
            time.sleep(60)

    except Exception:
        log.exception("PTB thread crashed")


# –ó–∞–ø—É—Å–∫–∞–µ–º PTB —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è (–∫–æ–≥–¥–∞ gunicorn –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask)
threading.Thread(target=_run_ptb, name="ptb-runner", daemon=True).start()


# ================== Flask routes ==================
@app_flask.route("/", methods=["GET"])
def health():
    return "OK", 200


@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    """–ü—Ä–∏—ë–º –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram. –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PTB –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –æ—Ç–¥–∞—ë–º –∞–ø–¥–µ–π—Ç –≤ PTB."""
    # –ø—Ä–æ–≤–µ—Ä–∏–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != WEBHOOK_SECRET:
        return abort(403)

    # –ø–æ–¥–æ–∂–¥—ë–º PTB (–¥–æ 20 —Å–µ–∫). Telegram –±—É–¥–µ—Ç —Ç–µ—Ä–ø–µ–ª–∏–≤–æ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç ~10 —Å–µ–∫, —ç—Ç–æ –æ–∫.
    if not ptb_ready.wait(timeout=20):
        log.warning("Received update, but PTB not ready yet")
        # –¥–∞—ë–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ –∑–∞—Å–ø–∞–º–∏–ª —Ä–µ—Ç—Ä–∞—è–º–∏ (–∞–ø–¥–µ–π—Ç –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–∫–æ—Ä–æ –ø—Ä–∏–¥—ë—Ç –µ—â—ë —Ä–∞–∑)
        return "ok", 200

    try:
        data = request.get_json(force=True, silent=False)
    except Exception:
        # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON ‚Äî –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã TG –Ω–µ –¥–æ–ª–±–∏–ª —Ä–µ—Ç—Ä–∞—è–º–∏
        log.exception("Invalid JSON in webhook")
        return "ok", 200

    if not data:
        return "ok", 200

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ Update –∏ –∫–ª–∞–¥—ë–º –≤ –æ—á–µ—Ä–µ–¥—å PTB
    try:
        upd = Update.de_json(data, application.bot)  # type: ignore[arg-type]
        application.update_queue.put_nowait(upd)     # type: ignore[union-attr]
    except Exception:
        # –Ω–µ –≤–∞–ª–∏–º –≤–µ–±—Ö—É–∫, –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200
        log.exception("Failed to enqueue update")
        return "ok", 200

    return "ok", 200
    
