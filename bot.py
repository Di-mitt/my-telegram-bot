# bot.py
from __future__ import annotations

import os
import asyncio
import logging
import threading
from typing import Optional

from flask import Flask, request, abort
from telegram import Update
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters,
)

# ---------- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# ---------- –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------
BOT_TOKEN = "8407972541:AAEXRIny7RMduH-sE8j5ooTMapqt2eMByd8"
APP_URL = os.getenv("APP_URL")  # –ø—Ä–∏–º–µ—Ä: https://my-telegram-bot-cr3q.onrender.com
WEBHOOK_SECRET = "mySecret_2025"

if not APP_URL:
    raise RuntimeError("Set env var APP_URL on Render")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# ---------- Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∏–¥–∏—Ç gunicorn ----------
app_flask = Flask(__name__)

# Telegram Application –∏ –ø—Ä–∏–∑–Ω–∞–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
app_tg: Optional[Application] = None
_bot_ready = threading.Event()


# ---------- handlers ----------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏ –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.text:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")


# ---------- —Å–ª—É–∂–µ–±–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã ----------
@app_flask.route("/", methods=["GET"])
def health() -> tuple[str, int]:
    return "OK", 200


@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook_handler():
    """–ü—Ä–∏—ë–º –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram —á–µ—Ä–µ–∑ Flask."""
    # –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–¥–æ 5 —Å–µ–∫—É–Ω–¥), —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å "not initialized"
    if not _bot_ready.wait(timeout=5):
        log.error("Webhook got request, but bot is not ready yet")
        return "ok", 200  # –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã TG –Ω–µ —Å—á–∏—Ç–∞–ª —ç—Ç–æ 500

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != WEBHOOK_SECRET:
        return abort(403)

    try:
        data = request.get_json(force=True, silent=False)
        if not data:
            return "ok", 200

        assert app_tg is not None
        update = Update.de_json(data, app_tg.bot)
        app_tg.update_queue.put_nowait(update)
        return "ok", 200
    except Exception:
        log.exception("Error in webhook_handler")
        return "ok", 200


# ---------- –∑–∞–ø—É—Å–∫ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ ----------
async def _async_start_bot():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ PTB –±–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞."""
    global app_tg

    app_tg = ApplicationBuilder().token(BOT_TOKEN).build()
    app_tg.add_handler(CommandHandler("start", start_cmd))
    app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏
    await app_tg.initialize()
    await app_tg.start()

    # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ (—Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π)
    await app_tg.bot.delete_webhook(drop_pending_updates=True)
    await app_tg.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
    log.info("Webhook set to %s", WEBHOOK_URL)

    _bot_ready.set()

    # –î–µ—Ä–∂–∏–º –∑–∞–¥–∞—á—É –∂–∏–≤–æ–π (PTB —Å–∞–º —Å–ª—É—à–∞–µ—Ç update_queue)
    await asyncio.Event().wait()


def _start_bot_in_thread():
    asyncio.run(_async_start_bot())


# –°—Ç–∞—Ä—Ç—É–µ–º —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è (–∫–æ–≥–¥–∞ gunicorn –µ–≥–æ –≥—Ä—É–∑–∏—Ç)
threading.Thread(target=_start_bot_in_thread, daemon=True).start()
