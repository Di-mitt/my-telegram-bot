# bot.py
from __future__ import annotations

import os
import time
import asyncio
import logging
import threading
from typing import Optional

from flask import Flask, request, abort
from telegram import Update, Bot
from telegram.ext import (
    Application, ApplicationBuilder,
    CommandHandler, MessageHandler,
    ContextTypes, filters,
)
from telegram.error import RetryAfter

# ‚îÄ‚îÄ –õ–æ–≥–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# ‚îÄ‚îÄ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render ‚Üí Environment) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN = os.getenv("BOT_TOKEN")                         # —Ç–æ–∫–µ–Ω @BotFather
APP_URL = os.getenv("APP_URL")                             # –Ω–∞–ø—Ä.: https://my-telegram-bot-cr3q.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL  = f"{APP_URL}{WEBHOOK_PATH}"

# ‚îÄ‚îÄ Flask (WSGI –¥–ª—è Render/gunicorn) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app_flask = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ PTB-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äî –Ω—É–∂–Ω–∞ Flask-—Ä–æ—É—Ç—É
app_tg: Optional[Application] = None


# ‚îÄ‚îÄ Telegram handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∂–∏–≤—ë—Ç –Ω–∞ Render –∏ –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.text:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")


# ‚îÄ‚îÄ Healthcheck ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app_flask.route("/", methods=["GET"])
def health() -> tuple[str, int]:
    return "OK", 200


# ‚îÄ‚îÄ Webhook endpoint (–ø—Ä–∏—ë–º –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook_handler():
    # 1) –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return abort(403)

    # 2) –µ—Å–ª–∏ PTB –µ—â—ë –Ω–µ –ø–æ–¥–Ω—è—Ç ‚Äî –æ—Ç–≤–µ—á–∞–µ–º 200, TG —Å–∞–º —Ä–µ—Ç—Ä–∞–π–Ω–µ—Ç
    if app_tg is None:
        log.warning("Webhook came, but Application not ready yet")
        return "ok", 200

    # 3) –∫–ª–∞–¥—ë–º –∞–ø–¥–µ–π—Ç –≤ –æ—á–µ—Ä–µ–¥—å PTB
    try:
        data = request.get_json(force=True, silent=False)
        if not data:
            return "ok", 200
        upd = Update.de_json(data, app_tg.bot)
        app_tg.update_queue.put_nowait(upd)
    except Exception:
        log.exception("Error in webhook_handler")
    return "ok", 200


# ‚îÄ‚îÄ –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ PTB –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _set_webhook_with_retries() -> None:
    """–°—Ç–∞–≤–∏—Ç webhook —á–µ—Ä–µ–∑ Bot API, —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –ø—Ä–∏ Rate Limit."""
    bot = Bot(BOT_TOKEN)
    for attempt in range(5):
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            await bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
            log.info("Webhook set to %s", WEBHOOK_URL)
            return
        except RetryAfter as e:
            wait_s = int(getattr(e, "retry_after", 1)) + 1
            log.warning("Rate limited on setWebhook. Retry in %s s (attempt %s/5)", wait_s, attempt + 1)
            await asyncio.sleep(wait_s)
        except Exception:
            log.exception("Failed to set webhook (attempt %s/5)", attempt + 1)
            await asyncio.sleep(2)
    log.error("Giving up setting webhook after 5 attempts")

def _start_webhook_setter_thread() -> None:
    def _runner():
        # –¥–∞—ë–º gunicorn/Flask –ø–æ–¥–Ω—è—Ç—å –ø–æ—Ä—Ç
        time.sleep(2)
        try:
            asyncio.run(_set_webhook_with_retries())
        except Exception:
            log.exception("Webhook setter crashed")
    threading.Thread(target=_runner, name="webhook-setter", daemon=True).start()


def _start_ptb_thread() -> None:
    def _runner():
        global app_tg
        try:
            log.info("Starting PTB Application...")
            application = ApplicationBuilder().token(BOT_TOKEN).build()
            application.add_handler(CommandHandler("start", start_cmd))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
            app_tg = application

            # –ø–æ–¥–Ω–∏–º–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π HTTP (–¥–ª—è –æ—á–µ—Ä–µ–¥–∏/–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á PTB)
            application.run_webhook(
                listen="0.0.0.0",
                port=int(os.environ.get("PORT", 10000)),
                url_path=WEBHOOK_PATH,
                # –ù–ï –ø–µ—Ä–µ–¥–∞—ë–º webhook_url/secret_token –∑–¥–µ—Å—å ‚Äî –º—ã –∏—Ö —Å—Ç–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ—Ä—É—Ç–∏–Ω–æ–π,
                # —á—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ç—Ä–∞–∏ –∏ –Ω–µ –ø–ª–æ–¥–∏—Ç—å setWebhook –Ω–∞ –∫–∞–∂–¥—ã–π —Ä–µ—Å—Ç–∞—Ä—Ç.
            )
        except Exception:
            log.exception("PTB application crashed")
    threading.Thread(target=_runner, name="ptb-runner", daemon=True).start()


# –°—Ç–∞—Ä—Ç—É–µ–º –≤—Å—ë –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è (–∫–æ–≥–¥–∞ gunicorn –∑–∞–≥—Ä—É–∂–∞–µ—Ç app_flask)
_start_ptb_thread()
_start_webhook_setter_thread()
