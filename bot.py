# bot.py
# --- –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞ –Ω–∞ Flask + Telegram HTTP API ---
# –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render/Gunicorn –±–µ–∑ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –∏ event loop.
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BOT_TOKEN, WEBHOOK_SECRET, APP_URL
#
# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:
#   GET  /health                             -> {"status":"ok"}
#   GET  /                                   -> –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –∏ echo —Å—Ç–∞—Ç–∞
#   POST /webhook/<WEBHOOK_SECRET>           -> –ø—Ä–∏–µ–º –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram

from __future__ import annotations

import json
import os
import sys
import time
import typing as t
from dataclasses import dataclass

import httpx
from flask import Flask, abort, jsonify, request

# -------------------- –ö–æ–Ω—Ñ–∏–≥ --------------------

@dataclass
class Config:
    token: str
    secret: str
    app_url: str

    @property
    def api_base(self) -> str:
        return f"https://api.telegram.org/bot{self.token}"

    @property
    def webhook_url(self) -> str:
        # –í–µ–±—Ö—É–∫ –≤—Å–µ–≥–¥–∞ –≤–µ–¥–µ—Ç –Ω–∞ /webhook/<secret>
        return f"{self.app_url.rstrip('/')}/webhook/{self.secret}"


def load_config() -> Config:
    token = os.environ.get("BOT_TOKEN") or os.environ.get("TELEGRAM_TOKEN")
    secret = os.environ.get("WEBHOOK_SECRET") or "mySecret_2025"
    app_url = os.environ.get("APP_URL")

    if not token:
        print("ERROR: BOT_TOKEN is not set", file=sys.stderr)
        sys.exit(1)
    if not app_url:
        print("ERROR: APP_URL is not set", file=sys.stderr)
        sys.exit(1)

    return Config(token=token.strip(), secret=secret.strip(), app_url=app_url.strip())


CFG = load_config()

# –ï–¥–∏–Ω—ã–π HTTP-–∫–ª–∏–µ–Ω—Ç (keep-alive), —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
HTTP_TIMEOUT = httpx.Timeout(10.0, connect=5.0)
CLIENT = httpx.Client(timeout=HTTP_TIMEOUT)


def tg_api(method: str, payload: dict) -> dict:
    """–í—ã–∑–æ–≤ Telegram Bot API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    url = f"{CFG.api_base}/{method}"
    try:
        r = CLIENT.post(url, json=payload)
        r.raise_for_status()
        data = r.json()
        if not data.get("ok", False):
            raise RuntimeError(f"Telegram API error: {data}")
        return data
    except Exception as e:
        print(f"[tg_api] {method} failed: {e}", file=sys.stderr)
        raise


def set_webhook() -> None:
    """–°—Ç–∞–≤–∏—Ç (–∏–ª–∏ –ø–µ—Ä–µc—Ç–∞–≤–∏—Ç) –≤–µ–±—Ö—É–∫ —Å –Ω—É–∂–Ω—ã–º URL."""
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º, –∑–∞—Ç–µ–º –ø–æ—Å—Ç–∞–≤–∏–º ‚Äî —Ç–∞–∫ –Ω–∞–¥–µ–∂–Ω–µ–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –¥–µ–ø–ª–æ—è—Ö
    try:
        tg_api("deleteWebhook", {"drop_pending_updates": False})
    except Exception:
        # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º
        pass

    # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫
    tg_api(
        "setWebhook",
        {
            "url": CFG.webhook_url,
            # –ú–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ç–∏–ø—ã –∞–ø–¥–µ–π—Ç–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            "allowed_updates": ["message", "edited_message"],
            # –ù–∞ —Ä–µ–Ω–¥–µ—Ä–µ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω—É–∂–µ–Ω
        },
    )
    print(f"[init] Webhook set -> {CFG.webhook_url}", file=sys.stderr)


# -------------------- Flask app --------------------

app = Flask(__name__)

# –ü—Ä–æ—Å—Ç–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è ¬´—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª ‚Äî —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –∂–∏–≤—ë–º
STATS = {
    "start_ts": int(time.time()),
    "updates": 0,
    "last_update_ts": 0,
}


@app.before_first_request
def _on_startup() -> None:
    # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤–æ—Ä–∫–µ—Ä–∞ gunicorn
    set_webhook()


@app.get("/")
def index():
    return jsonify(
        status="ok",
        webhook_url=CFG.webhook_url,
        updates=STATS["updates"],
        up_seconds=int(time.time()) - STATS["start_ts"],
    )


@app.get("/health")
def health():
    return jsonify(status="ok")


def _handle_message(msg: dict) -> None:
    """–ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: /start -> –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∏–Ω–∞—á–µ ‚Äî —ç—Ö–æ."""
    chat = msg.get("chat") or {}
    chat_id = chat.get("id")
    if not chat_id:
        return

    text = msg.get("text") or ""
    if text.startswith("/start"):
        reply = "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ"
    else:
        # –ü—Ä–æ—Å—Ç–æ–µ —ç—Ö–æ
        reply = f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {text}" if text else "–Ø –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ üôÇ"

    tg_api(
        "sendMessage",
        {
            "chat_id": chat_id,
            "text": reply,
            "disable_web_page_preview": True,
        },
    )


@app.post(f"/webhook/{CFG.secret}")
def telegram_webhook():
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ Telegram."""
    try:
        payload = request.get_json(force=True, silent=False)
    except Exception:
        abort(400)

    if not isinstance(payload, dict):
        abort(400)

    # –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    STATS["updates"] += 1
    STATS["last_update_ts"] = int(time.time())

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = payload.get("message") or payload.get("edited_message")
    if message:
        try:
            _handle_message(message)
        except Exception as e:
            # –ù–µ —Ä–æ–Ω—è–µ–º –≤–µ–±-—Ö—É–∫ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã TG –Ω–µ —Å–ª–∞–ª —Ä–µ—Ç—Ä–∞–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
            print(f"[webhook] handle error: {e}\npayload={json.dumps(payload, ensure_ascii=False)}", file=sys.stderr)

    # Telegram –∂–¥—ë—Ç –±—ã—Å—Ç—Ä—ã–π 200 OK
    return jsonify(ok=True)


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –≤–∏–¥–µ—Ç—å ¬´–±—É—Ñ–µ—Ä¬ª/–≤–µ–±—Ö—É–∫ –≤ json (—É–¥–æ–±–Ω–æ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
@app.get("/debug")
def debug():
    return jsonify(
        status="ok",
        webhook_url=CFG.webhook_url,
        stats=STATS,
    )


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è gunicorn: `gunicorn bot:app` –∏–ª–∏ `gunicorn bot:app_flask`
app_flask = app  # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–≤–æ–µ–π —Ç–µ–∫—É—â–µ–π Proc/Render –∫–æ–º–∞–Ω–¥–æ–π
