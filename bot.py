# bot.py
from __future__ import annotations

import os
import time
import asyncio
import logging
import threading
from typing import Optional, Deque
from collections import deque

from flask import Flask, request, abort
from telegram import Update, Bot
from telegram.ext import (
    Application, ApplicationBuilder,
    CommandHandler, MessageHandler,
    ContextTypes, filters,
)
from telegram.error import RetryAfter

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–û–ì–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–ö–†–£–ñ–ï–ù–ò–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN = os.getenv("BOT_TOKEN")                      # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
APP_URL = os.getenv("APP_URL")                          # –Ω–∞–ø—Ä.: https://my-telegram-bot-cr3q.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL  = f"{APP_URL}{WEBHOOK_PATH}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ì–õ–û–ë–ê–õ–¨–ù–´–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app_flask = Flask(__name__)                # WSGI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–µ–≥–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç gunicorn)
app_tg: Optional[Application] = None       # PTB-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–º—ã –ø–æ–¥–Ω–∏–º–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)

_pending_lock = threading.Lock()
_pending_updates: Deque[dict] = deque()    # –±—É—Ñ–µ—Ä –∞–ø–¥–µ–π—Ç–æ–≤, –ø–æ–∫–∞ –±–æ—Ç –Ω–µ –≥–æ—Ç–æ–≤


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HANDLERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –Ω–∞ Render –∏ –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.text:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HEALTH ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app_flask.route("/", methods=["GET"])
def health() -> tuple[str, int]:
    return "OK", 200


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ WEBHOOK (Flask) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook_handler():
    # 1) –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return abort(403)

    # 2) —á–∏—Ç–∞–µ–º JSON –æ—Ç Telegram
    try:
        data = request.get_json(force=True, silent=False)
    except Exception:
        log.exception("Cannot parse webhook JSON")
        return "ok", 200

    if not data:
        return "ok", 200

    # 3) –µ—Å–ª–∏ PTB –µ—â—ë –Ω–µ –ø–æ–¥–Ω—è—Ç ‚Äî –±—É—Ñ–µ—Ä–∏–∑—É–µ–º
    if app_tg is None:
        with _pending_lock:
            _pending_updates.append(data)
        log.warning("Buffered update while bot not ready (queue=%d)", len(_pending_updates))
        return "ok", 200

    # 4) –µ—Å–ª–∏ PTB —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî —Å—Ä–∞–∑—É –≤ –æ—á–µ—Ä–µ–¥—å PTB
    try:
        upd = Update.de_json(data, app_tg.bot)
        app_tg.update_queue.put_nowait(upd)
    except Exception:
        log.exception("Failed to enqueue live update")
    return "ok", 200


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–°–¢–ê–ù–û–í–ö–ê –í–ï–ë–•–£–ö–ê (—Å —Ä–µ—Ç—Ä–∞—è–º–∏) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _set_webhook_with_retries() -> None:
    bot = Bot(BOT_TOKEN)
    for attempt in range(5):
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            await bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
            log.info("Webhook set to %s", WEBHOOK_URL)
            return
        except RetryAfter as e:
            wait_s = int(getattr(e, "retry_after", 1)) + 1
            log.warning("Rate limited on setWebhook. Retry in %s s (attempt %s/5)", wait_s, attempt + 1)
            await asyncio.sleep(wait_s)
        except Exception:
            log.exception("Failed to set webhook (attempt %s/5)", attempt + 1)
            await asyncio.sleep(2)
    log.error("Giving up setting webhook after 5 attempts")


def _start_webhook_setter_thread() -> None:
    def _runner():
        # –¥–∞—ë–º gunicorn/Flask –ø–æ–¥–Ω—è—Ç—å –ø–æ—Ä—Ç
        time.sleep(2)
        try:
            asyncio.run(_set_webhook_with_retries())
        except Exception:
            log.exception("Webhook setter crashed")
    threading.Thread(target=_runner, name="webhook-setter", daemon=True).start()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–û–î–™–Å–ú PTB, –°–õ–ò–í –ë–£–§–ï–†–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _start_ptb_thread() -> None:
    def _runner():
        global app_tg
        try:
            log.info("Starting PTB Application...")
            application = ApplicationBuilder().token(BOT_TOKEN).build()

            application.add_handler(CommandHandler("start", start_cmd))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

            # –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è Flask
            app_tg = application

            # –°–ª–∏–≤–∞–µ–º —Ç–æ, —á—Ç–æ –ø—Ä–∏—à–ª–æ —Ä–∞–Ω–Ω–∏–º –≤–µ–±—Ö—É–∫–æ–º
            with _pending_lock:
                while _pending_updates:
                    data = _pending_updates.popleft()
                    try:
                        upd = Update.de_json(data, app_tg.bot)
                        app_tg.update_queue.put_nowait(upd)
                    except Exception:
                        log.exception("Failed to enqueue buffered update")

            # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP –ø—Ä–∏—ë–º–Ω–∏–∫ PTB (–±–µ–∑ setWebhook ‚Äî –æ–Ω —Å—Ç–∞–≤–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
            application.run_webhook(
                listen="0.0.0.0",
                port=int(os.environ.get("PORT", 10000)),
                url_path=WEBHOOK_PATH,
            )
        except Exception:
            log.exception("PTB application crashed")
    threading.Thread(target=_runner, name="ptb-runner", daemon=True).start()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–¢–ê–†–¢ –ü–†–ò –ò–ú–ü–û–†–¢–ï (–¥–ª—è gunicorn) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_start_ptb_thread()
_start_webhook_setter_thread()
