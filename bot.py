# bot.py
from __future__ import annotations

import os
import asyncio
import logging
import threading
from collections import deque
from typing import Optional

from flask import Flask, request, abort

from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ============ –õ–æ–≥–∏ ============
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# ============ ENV ============
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://my-telegram-bot-xxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# ============ Flask ============
app_flask = Flask(__name__)

# PTB-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (—Å–æ–∑–¥–∞—ë–º/–∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∏–∂–µ, –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
app_tg: Optional[Application] = None

# –§–ª–∞–≥ ‚ÄúPTB –≥–æ—Ç–æ–≤‚Äù –∏ –±—É—Ñ–µ—Ä –≤—Ö–æ–¥—è—â–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤ –Ω–∞ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
_ready_evt = threading.Event()
_buffer = deque(maxlen=100)


# ============ Handlers ============
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")
    except Exception:
        log.exception("Error in /start")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if update.message and update.message.text:
            await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")
    except Exception:
        log.exception("Error in echo")


# ============ ‚Äú–î–≤–∏–∂–æ–∫‚Äù PTB –±–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ============
def _run_ptb_in_background() -> None:
    """
    –ì–æ—Ç–æ–≤–∏—Ç Application, –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ (initialize/start) –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º event loop
    –∏ —Å—Ç–∞–≤–∏—Ç webhook –Ω–∞ –Ω–∞—à Flask-—Ä–æ—É—Ç WEBHOOK_URL. –†–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    """
    async def _runner():
        global app_tg

        app_tg = (
            ApplicationBuilder()
            .token(BOT_TOKEN)
            .build()
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app_tg.add_handler(CommandHandler("start", start_cmd))
        app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ PTB (–±–µ–∑ run_webhook / run_polling)
        await app_tg.initialize()
        await app_tg.start()

        # –í—ã—Å—Ç–∞–≤–ª—è–µ–º webhook —É Telegram –Ω–∞ –Ω–∞—à Flask-URL
        # (PTB —Å–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª—É—à–∞–µ—Ç –ø–æ HTTP ‚Äî —ç—Ç–æ –¥–µ–ª–∞–µ—Ç Flask+gunicorn)
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π
            await app_tg.bot.delete_webhook(drop_pending_updates=False)
            # –ó–∞—Ç–µ–º –ø–æ—Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π —Å–æ —Å–∫—Ä—ã—Ç—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º-–ø–æ–¥–ø–∏—Å—å—é
            await app_tg.bot.set_webhook(
                url=WEBHOOK_URL,
                secret_token=WEBHOOK_SECRET,
            )
            log.info("Webhook set to %s", WEBHOOK_URL)
        except Exception:
            log.exception("Failed to set webhook")

        # –û—Ç–º–µ—á–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏ —Å–ª–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä
        _ready_evt.set()
        _flush_buffer_safe()

        # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äú–≤–µ—á–Ω–æ‚Äù –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        await asyncio.Event().wait()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π event loop PTB
    asyncio.run(_runner())


def _flush_buffer_safe() -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ JSON-–∞–ø–¥–µ–π—Ç—ã –≤ PTB-–æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –≤—Å—ë –≥–æ—Ç–æ–≤–æ."""
    if not (_ready_evt.is_set() and app_tg and app_tg.update_queue):
        return

    while _buffer:
        data = _buffer.popleft()
        try:
            upd = Update.de_json(data, app_tg.bot)
            app_tg.update_queue.put_nowait(upd)
        except Exception:
            log.exception("Failed to push buffered update")


# ============ Flask routes ============
@app_flask.route("/", methods=["GET"])
def health() -> tuple[str, int]:
    return "OK", 200


@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook_handler():
    # –ó–∞—â–∏—Ç–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != WEBHOOK_SECRET:
        return abort(403)

    # –ü–æ–ª—É—á–∞–µ–º JSON –∞–ø–¥–µ–π—Ç–∞
    data = request.get_json(force=True, silent=True)
    if not data:
        return "ok", 200

    # –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ç—å)
    log.info("Webhook JSON: %s", data)

    # –ï—Å–ª–∏ PTB –µ—â—ë —Å—Ç–∞—Ä—Ç—É–µ—Ç ‚Äî –≤ –±—É—Ñ–µ—Ä
    if not _ready_evt.is_set() or not app_tg or not app_tg.update_queue:
        log.warning("Received update, but PTB not ready yet")
        _buffer.append(data)
        return "ok", 200

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å PTB
    try:
        upd = Update.de_json(data, app_tg.bot)
        app_tg.update_queue.put_nowait(upd)
    except Exception:
        log.exception("Failed to push update to PTB queue")

    return "ok", 200


# ============ –°—Ç–∞—Ä—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ PTB ============
# –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∏–∂–æ–∫ PTB —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è (–¥–æ —Å—Ç–∞—Ä—Ç–∞ gunicorn –≤–æ—Ä–∫–µ—Ä–∞)
_thread = threading.Thread(target=_run_ptb_in_background, daemon=True)
_thread.start()
