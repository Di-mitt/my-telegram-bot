# bot.py
from __future__ import annotations

import asyncio
import logging
import os
import threading
from typing import Optional

from flask import Flask, abort, request
from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("bot")

# -------------------- ENV --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://my-telegram-bot-xxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# -------------------- Flask --------------------
app_flask = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã PTB
app_tg: Optional[Application] = None
app_ready = threading.Event()  # —Ñ–ª–∞–≥ ¬´–±–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã¬ª

# -------------------- handlers --------------------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.text:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")

# -------------------- PTB runner (–±–µ–∑ run_webhook) --------------------
async def _ptb_main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º PTB —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–∏–Ω–∏–º–∞–ª –∞–ø–¥–µ–π—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ update_queue."""
    global app_tg

    application = ApplicationBuilder().token(BOT_TOKEN).build()
    app_tg = application

    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", start_cmd))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å—Ç–∞—Ä—Ç –±–µ–∑ poll/webhook (–º—ã —Å–∞–º–∏ –∫–ª–∞–¥—ë–º –∞–ø–¥–µ–π—Ç—ã –≤ –æ—á–µ—Ä–µ–¥—å)
    await application.initialize()
    await application.start()

    # —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ –¥–ª—è Telegram (–ø—É—Å—Ç—å —à–ª—ë—Ç –∫ –Ω–∞–º –Ω–∞ Flask)
    try:
        await application.bot.delete_webhook(drop_pending_updates=True)
        await application.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
        log.info("Webhook set to %s", WEBHOOK_URL)
    except Exception:
        log.exception("Failed to set webhook")

    # –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –±–æ—Ç –≥–æ—Ç–æ–≤, –∏ ¬´—Å–ø–∏–º¬ª, —á—Ç–æ–±—ã —Ü–∏–∫–ª –∂–∏–ª
    app_ready.set()
    while True:
        await asyncio.sleep(3600)

def _ptb_thread_runner() -> None:
    """–ó–∞–ø—É—Å–∫ PTB –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º event loop."""
    try:
        asyncio.run(_ptb_main())
    except Exception:
        log.exception("PTB runner crashed")

# –ó–∞–ø—É—Å–∫–∞–µ–º PTB —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ (–∫–æ–≥–¥–∞ gunicorn –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç bot:app_flask)
threading.Thread(target=_ptb_thread_runner, daemon=True).start()

# -------------------- Flask routes --------------------
@app_flask.route("/", methods=["GET"])
def health() -> tuple[str, int]:
    return "OK", 200

@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook_handler():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != WEBHOOK_SECRET:
        log.warning("Webhook 403: wrong secret")
        return abort(403)

    # –ü–∞—Ä—Å–∏–º JSON –∏ –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –≤ PTB
    try:
        data = request.get_json(force=True, silent=False)
        log.info("Webhook JSON: %s", data)

        if not data:
            log.warning("Empty JSON in webhook")
            return "ok", 200

        if not app_ready.is_set() or app_tg is None:
            # –ë—ã–≤–∞–µ—Ç –≤ –ø–µ—Ä–≤—ã–µ —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ —Ç–µ—Ä—è–µ–º –∞–ø–¥–µ–π—Ç
            log.warning(
                "Buffered update while bot not ready (queue=%s)",
                0 if app_tg is None else app_tg.update_queue.qsize(),
            )
            return "ok", 200

        update = Update.de_json(data, app_tg.bot)
        app_tg.update_queue.put_nowait(update)
        log.info("Webhook: update queued")
        return "ok", 200

    except Exception:
        # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ –≤–∏–¥–µ–ª 500 –∏ –Ω–µ –∑–∞–±–∏–≤–∞–ª –æ—á–µ—Ä–µ–¥—å —Ä–µ—Ç—Ä–∞—è–º–∏
        log.exception("Error in webhook_handler")
        return "ok", 200
