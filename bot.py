# bot.py
from __future__ import annotations

import os
import logging
import threading
import asyncio
import signal
from typing import Optional, List, Dict, Any

from flask import Flask, request, abort

from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("bot")

# ---------- –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
APP_URL = os.getenv("APP_URL")      # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω: https://....onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# ---------- –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã ----------
app_flask = Flask(__name__)

app_tg: Optional[Application] = None
_ptb_ready: bool = False
_buffer: List[Dict[str, Any]] = []
_buffer_lock = threading.Lock()


# ---------- PTB handlers ----------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")
    except Exception:
        log.exception("Error in /start")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if update.message and update.message.text:
            await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")
    except Exception:
        log.exception("Error in echo")


# ---------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ----------
def _push_to_buffer(data: Dict[str, Any]) -> None:
    """–ö–ª–∞–¥—ë–º –∞–ø–¥–µ–π—Ç –≤ –±—É—Ñ–µ—Ä, –ø–æ–∫–∞ PTB –Ω–µ –ø–æ–¥–Ω—è–ª—Å—è."""
    with _buffer_lock:
        _buffer.append(data)
        if len(_buffer) > 200:
            # –∑–∞—â–∏—â–∞–µ–º—Å—è –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
            _buffer.pop(0)
        log.warning("Received update, but PTB is not ready yet (buffer=%d)", len(_buffer))

async def _drain_buffer() -> None:
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã –≤ PTB, –∫–æ–≥–¥–∞ —è–¥—Ä–æ –≥–æ—Ç–æ–≤–æ."""
    global _buffer
    if not app_tg:
        return
    with _buffer_lock:
        pending = _buffer
        _buffer = []
    if not pending:
        return
    log.info("Draining buffered updates: %d", len(pending))
    for data in pending:
        try:
            upd = Update.de_json(data, app_tg.bot)
            app_tg.update_queue.put_nowait(upd)
        except Exception:
            log.exception("Failed to forward buffered update")


# ---------- Flask routes ----------
@app_flask.get("/")
def health() -> tuple[str, int]:
    return "OK", 200

@app_flask.post(WEBHOOK_PATH)
def webhook_receiver():
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != WEBHOOK_SECRET:
        return abort(403)

    try:
        data = request.get_json(force=True, silent=False)
    except Exception:
        log.exception("Bad JSON in webhook")
        return "ok", 200

    if not data:
        return "ok", 200

    log.info("Webhook JSON: %s", data)

    # –µ—Å–ª–∏ PTB –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤ ‚Äî –≤ –±—É—Ñ–µ—Ä
    if not _ptb_ready or not app_tg:
        _push_to_buffer(data)
        return "ok", 200

    # –∏–Ω–∞—á–µ —Å—Ä–∞–∑—É –≤ –æ—á–µ—Ä–µ–¥—å PTB
    try:
        upd = Update.de_json(data, app_tg.bot)
        app_tg.update_queue.put_nowait(upd)
    except Exception:
        log.exception("Failed to enqueue update")

    return "ok", 200


# ---------- –∑–∞–ø—É—Å–∫ PTB –≤ —Ñ–æ–Ω–µ ----------
async def _ptb_main() -> None:
    global app_tg, _ptb_ready

    application = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .build()
    )

    # handlers
    application.add_handler(CommandHandler("start", start_cmd))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PTB –±–µ–∑ run_webhook / run_polling
    await application.initialize()
    await application.start()

    # –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫
    try:
        await application.bot.delete_webhook(drop_pending_updates=False)
        await application.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
        log.info("Webhook set to %s", WEBHOOK_URL)
    except Exception:
        log.exception("Failed to set webhook")

    # —è–¥—Ä–æ –≥–æ—Ç–æ–≤–æ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –∏ —Å–ª–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä
    app_tg = application
    _ptb_ready = True
    await _drain_buffer()

    # –¥–µ—Ä–∂–∏–º –∑–∞–¥–∞—á—É –∂–∏–≤–æ–π –¥–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    stop_event = asyncio.Event()

    def _on_term(*_):
        try:
            stop_event.set()
        except Exception:
            pass

    loop = asyncio.get_running_loop()
    for sig in (signal.SIGINT, signal.SIGTERM):
        try:
            loop.add_signal_handler(sig, _on_term)
        except NotImplementedError:
            # –Ω–∞ Windows —Å–∏–≥–Ω–∞–ª–æ–≤ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å
            pass

    await stop_event.wait()

    # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    try:
        await application.stop()
        await application.shutdown()
    except Exception:
        log.exception("Error during PTB shutdown")


def _bg_runner():
    # –æ—Ç–¥–µ–ª—å–Ω—ã–π event loop –¥–ª—è PTB
    try:
        asyncio.run(_ptb_main())
    except Exception:
        log.exception("PTB application crashed")


# —Å—Ç–∞—Ä—Ç—É–µ–º —Ñ–æ–Ω —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Çe –º–æ–¥—É–ª—è (gunicorn –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –¥–ª—è wsgi)
_thread = threading.Thread(target=_bg_runner, name="ptb-runner", daemon=True)
_thread.start()

# ---------- –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ ----------
