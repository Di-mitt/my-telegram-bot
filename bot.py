# bot.py
import os
from flask import Flask, request, abort
from telegram import Update
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters,
)

# ======= ENV =======
BOT_TOKEN = os.environ["BOT_TOKEN"]                # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
APP_URL = os.environ["APP_URL"]                   # –Ω–∞–ø—Ä. https://my-telegram-bot.onrender.com
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "change-me")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# ======= Flask app (–≤–∞–∂–Ω–æ: –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ!) =======
app_flask = Flask(__name__)

# ======= Telegram application =======
app_tg: Application = ApplicationBuilder().token(BOT_TOKEN).build()

# handlers
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏ –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")

app_tg.add_handler(CommandHandler("start", start_cmd))import os
from flask import Flask, request, abort
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# === –ö–æ–Ω—Ñ–∏–≥ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # –ü—Ä–∏–º–µ—Ä: https://my-telegram-bot.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "change-me")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è gunicorn
app_flask = Flask(__name__)

# Telegram Application —Å–æ–∑–¥–∞—ë–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
app_tg = ApplicationBuilder().token(BOT_TOKEN).build()

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏ –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
app_tg.add_handler(CommandHandler("start", start_cmd))
app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

# === –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
async def on_startup(application):
    await application.bot.delete_webhook(drop_pending_updates=True)
    await application.bot.set_webhook(
        url=WEBHOOK_URL,
        secret_token=WEBHOOK_SECRET
    )

# === –ú–∞—Ä—à—Ä—É—Ç Flask ===
@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook_handler():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        abort(403)

    json_update = request.get_json(force=True)
    app_tg.update_queue.put_nowait(Update.de_json(json_update, app_tg.bot))
    return "ok"

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç gunicorn, –∞ –ª–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ run_webhook)
if __name__ == "__main__":
    app_tg.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        url_path=WEBHOOK_PATH,
        webhook_url=WEBHOOK_URL,
        secret_token=WEBHOOK_SECRET,
        on_startup=[on_startup]
    )
