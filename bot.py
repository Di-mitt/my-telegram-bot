# bot.py
from __future__ import annotations

import asyncio
import json
import logging
import os
import threading
import time
from typing import Optional

from flask import Flask, Request, abort, request
from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# ---------------- logging ----------------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# --------------- env ----------------
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
APP_URL = os.getenv("APP_URL")      # –Ω–∞–ø—Ä–∏–º–µ—Ä https://my-telegram-bot-xxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# --------------- globals ----------------
app_flask = Flask(__name__)
app_tg: Optional[Application] = None

_ptb_ready = threading.Event()   # —Å—Ç–∞–≤–∏–º, –∫–æ–≥–¥–∞ PTB –∑–∞–ø—É—â–µ–Ω
_loop: Optional[asyncio.AbstractEventLoop] = None


# --------------- handlers ----------------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")


# --------------- PTB runner ----------------
async def _ensure_webhook(bot):
    """–°—Ç–∞–≤–∏—Ç –≤–µ–±—Ö—É–∫ –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å)."""
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
        log.info("Webhook set to %s", WEBHOOK_URL)
    except Exception:
        log.exception("Failed to set webhook")


def _ptb_thread():
    """–ó–∞–ø—É—Å–∫ PTB —è–¥—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å–æ —Å–≤–æ–∏–º loop."""
    global app_tg, _loop
    _loop = asyncio.new_event_loop()
    asyncio.set_event_loop(_loop)

    app_tg = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .build()
    )
    app_tg.add_handler(CommandHandler("start", start_cmd))
    app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    async def _start():
        # initialize + start, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—á–µ—Ä–µ–¥—å —É–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–ø–¥–µ–π—Ç—ã
        await app_tg.initialize()
        await app_tg.start()
        _ptb_ready.set()  # <<< –æ—Ç–º–µ—á–∞–µ–º "–≥–æ—Ç–æ–≤–æ" —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        # –≤–µ–±—Ö—É–∫ —Å—Ç–∞–≤–∏–º –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
        asyncio.create_task(_ensure_webhook(app_tg.bot))

        # –¥–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await asyncio.Event().wait()

    try:
        _loop.run_until_complete(_start())
    except Exception:
        log.exception("PTB runner crashed")


def _ensure_ptb_started():
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å PTB (–æ–¥–∏–Ω —Ä–∞–∑)."""
    if not _ptb_ready.is_set():
        t = threading.Thread(target=_ptb_thread, name="ptb-runner", daemon=True)
        t.start()


# --------------- Flask routes ----------------
@app_flask.get("/")
def health():
    _ensure_ptb_started()
    return "OK", 200


@app_flask.post(WEBHOOK_PATH)
def webhook_handler():
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        abort(403)

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ PTB
    _ensure_ptb_started()

    # –∂–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PTB –º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥
    if not _ptb_ready.wait(timeout=5):
        log.warning("Got update but PTB not ready yet ‚Äî dropping safely")
        return "ok", 200

    try:
        data: dict = request.get_json(force=True, silent=False)
        # –ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ ‚Äî –≤–∏–¥–µ—Ç—å ¬´—Å—ã—Ä—ã–µ¬ª –∞–ø–¥–µ–π—Ç—ã
        log.info("Webhook JSON: %s", json.dumps(data, ensure_ascii=False))

        # –ø–µ—Ä–µ–¥–∞—ë–º –∞–ø–¥–µ–π—Ç –≤ PTB
        upd = Update.de_json(data, app_tg.bot)  # type: ignore[arg-type]
        app_tg.update_queue.put_nowait(upd)     # type: ignore[union-attr]
        return "ok", 200
    except Exception:
        log.exception("Error while handling webhook")
        return "ok", 200


# --------------- local run ----------------
if __name__ == "__main__":
    # –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –¥–ª—è Render —ç—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    _ensure_ptb_started()
    app_flask.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
