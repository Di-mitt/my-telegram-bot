# bot.py
from __future__ import annotations

import os
import threading
import logging
from typing import Optional

from flask import Flask, request, abort
from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------- –õ–æ–≥–∏ ----------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# ---------- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://my-telegram-bot-xxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# ---------- Flask (WSGI) ----------
app_flask = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ PTB-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app_tg: Optional[Application] = None


# ---------- Handlers ----------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –∂–∏–≤—É –Ω–∞ Render –∏ –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.text:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")


# ---------- –í–µ–±—Ö—É–∫: health –∏ –ø—Ä–∏—ë–º –∞–ø–¥–µ–π—Ç–æ–≤ ----------
@app_flask.route("/", methods=["GET"])
def health() -> tuple[str, int]:
    return "OK", 200


@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook_handler():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return abort(403)

    data = request.get_json(force=True, silent=True)
    if not data:
        log.warning("Empty JSON in webhook")
        return "ok", 200

    if not app_tg:
        # –†–µ–¥–∫–∏–π —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ—Ç–æ–∫ –µ—â—ë –Ω–µ —É—Å–ø–µ–ª —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å.
        # –û—Ç–≤–µ—Ç–∏–º 200 ‚Äî Telegram —Å–∞–º –ø–æ–ø—Ä–æ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.
        log.error("app_tg is not initialized yet")
        return "ok", 200

    try:
        upd = Update.de_json(data, app_tg.bot)
        # –í–ê–ñ–ù–û: –∫–ª–∞–¥—ë–º –∞–ø–¥–µ–π—Ç –≤ –æ—á–µ—Ä–µ–¥—å –ë–ï–ó –¥–æ–ø. –ø—Ä–æ–≤–µ—Ä–æ–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ‚Äî
        # PTB –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ–≥–æ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.
        app_tg.update_queue.put_nowait(upd)
    except Exception:
        log.exception("Failed to enqueue update")

    return "ok", 200


# ---------- –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ PTB –ø–æ–¥ gunicorn ----------
def _run_bot() -> None:
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    global app_tg
    try:
        log.info("Starting PTB application‚Ä¶")
        application = ApplicationBuilder().token(BOT_TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
        application.add_handler(CommandHandler("start", start_cmd))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

        app_tg = application  # –¥–µ–ª–∏–º—Å—è —Å—Å—ã–ª–∫–æ–π —Å Flask

        # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ –í–û –í–†–ï–ú–Ø —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        async def on_startup(app: Application) -> None:
            log.info("Setting webhook: %s", WEBHOOK_URL)
            await app.bot.delete_webhook(drop_pending_updates=True)
            await app.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
            log.info("Webhook is set")

        # –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ü–∏–∫–ª PTB ‚Äî –≤–Ω—É—Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        application.run_webhook(
            listen="0.0.0.0",
            port=int(os.environ.get("PORT", 10000)),
            url_path=WEBHOOK_PATH,
            webhook_url=WEBHOOK_URL,
            secret_token=WEBHOOK_SECRET,
            on_startup=[on_startup],
        )
    except Exception:
        log.exception("PTB application crashed")


# –°—Ç–∞—Ä—Ç—É–µ–º –±–æ—Ç –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è (–∫–æ–≥–¥–∞ gunicorn –ø–æ–¥–Ω–∏–º–∞–µ—Ç app_flask)
threading.Thread(target=_run_bot, name="ptb-runner", daemon=True).start()
