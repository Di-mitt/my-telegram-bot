# bot.py
# -*- coding: utf-8 -*-
"""
Render + Gunicorn + Flask + python-telegram-bot (v21.x)
–ù–∞–¥—ë–∂–Ω—ã–π –≤–µ–±—Ö—É–∫ —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –≤–æ—Ä–∫–µ—Ä–∞.

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏):
- TELEGRAM_TOKEN      : —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- BASE_URL            : –ø—É–±–ª–∏—á–Ω—ã–π https URL —Å–µ—Ä–≤–∏—Å–∞ (–Ω–∞–ø—Ä. https://my-telegram-bot-xxxx.onrender.com)
- WEBHOOK_PATH        : —Ö–≤–æ—Å—Ç –ø—É—Ç–∏ –≤–µ–±—Ö—É–∫–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "mySecret_2025"
- WEBHOOK_SECRET      : —Å–µ–∫—Ä–µ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-Bot-Api-Secret-Token (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ WEBHOOK_PATH)
- PORT                : –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ (Render –∑–∞–¥–∞—ë—Ç —Å–∞–º), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10000
"""

from __future__ import annotations

import atexit
import json
import logging
import os
import signal
import threading
import time
from collections import deque
from typing import Deque, Optional

from flask import Flask, jsonify, request
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
)

# ----------------------- –ö–æ–Ω—Ñ–∏–≥ / –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ -----------------------

logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("bot")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set")

BASE_URL = os.getenv("BASE_URL", "").strip()  # –Ω–∞–ø—Ä. https://my-telegram-bot-xxxx.onrender.com
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "mySecret_2025").strip()
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", WEBHOOK_PATH).strip()
PORT = int(os.getenv("PORT", "10000"))

WEBHOOK_URL = f"{BASE_URL.rstrip('/')}/webhook/{WEBHOOK_PATH}"

# ----------------------- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ PTB -----------------------

app_flask = Flask(__name__)

_app_tg: Optional[Application] = None
_loop_tg = None  # type: Optional[asyncio.AbstractEventLoop]  # hint: —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤ —Ç—Ä–µ–¥–µ
_ready_evt = threading.Event()  # PTB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã
_stop_evt = threading.Event()   # –ø—Ä–æ—Å–∏–º PTB –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è

_buffer: Deque[dict] = deque()  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–ø–¥–µ–π—Ç–æ–≤ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PTB
_BUFFER_MAX = int(os.getenv("BUFFER_MAX", "1000"))

# ----------------------- –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞ -----------------------

async def cmd_start(update: Update, _ctx):
    user = update.effective_user
    name = (user.full_name if user else "–¥—Ä—É–≥")
    await update.effective_chat.send_message(
        f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ\n"
        f"–û—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–æ–≤—Ç–æ—Ä—é –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ.",
        parse_mode=ParseMode.HTML,
    )

async def echo(update: Update, _ctx):
    if update.message and update.message.text:
        await update.message.reply_text(f"–¢—ã —Å–∫–∞–∑–∞–ª: <code>{update.message.text}</code>", parse_mode=ParseMode.HTML)

# ----------------------- –°–µ—Ä–≤–∏—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -----------------------

def _submit_update_json(data: dict) -> None:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å JSON –∞–ø–¥–µ–π—Ç–∞ –≤ Update –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–¥–∞—Ç—å PTB."""
    global _app_tg, _loop_tg
    if not (_app_tg and _loop_tg and _ready_evt.is_set()):
        return

    try:
        upd = Update.de_json(data, _app_tg.bot)
    except Exception as e:
        log.exception("Bad update JSON, skip: %s", e)
        return

    # process_update ‚Äî –∫–æ—Ä—É—Ç–∏–Ω–∞; –∏—Å–ø–æ–ª–Ω—è–µ–º –µ—ë –≤–Ω—É—Ç—Ä–∏ event-loop PTB
    import asyncio
    fut = asyncio.run_coroutine_threadsafe(_app_tg.process_update(upd), _loop_tg)
    # –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º ‚Äî –Ω–æ –ø–æ–¥–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π (–∏–Ω–∞—á–µ –º–æ–ª—á–∞ –ø–æ—Ç–µ—Ä—è–µ–º)
    def _done(_f):
        try:
            _f.result()
        except Exception:
            log.exception("PTB process_update failed")
    fut.add_done_callback(_done)

def _drain_buffer(tag: str) -> int:
    """–°–ª–∏—Ç—å –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –∞–ø–¥–µ–π—Ç—ã –≤ PTB. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª-–≤–æ —Å–ª–∏—Ç—ã—Ö."""
    drained = 0
    while _ready_evt.is_set() and _buffer:
        data = _buffer.popleft()
        _submit_update_json(data)
        drained += 1
    if drained:
        log.info("Buffer drain (%s): flushed %d update(s)", tag, drained)
    return drained

# ----------------------- –ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤ PTB –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç—Ä–µ–¥–µ -----------------------

def _ptb_thread():
    """–ë—ç–∫–≥—Ä–∞—É–Ω–¥-—Ç—Ä–µ–¥: —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π event-loop + –∑–∞–ø—É—Å–∫ PTB Application."""
    import asyncio

    global _app_tg, _loop_tg

    try:
        _loop_tg = asyncio.new_event_loop()
        asyncio.set_event_loop(_loop_tg)

        _app_tg = (
            ApplicationBuilder()
            .token(TELEGRAM_TOKEN)
            .concurrent_updates(True)  # —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–æ–∫
            .build()
        )

        # –º–∞—Ä—à—Ä—É—Ç—ã
        _app_tg.add_handler(CommandHandler("start", cmd_start))
        _app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

        async def _async_bootstrap():
            await _app_tg.initialize()
            await _app_tg.start()
            log.info("PTB: initialized & started")
            # —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –µ—â—ë –∑–¥–µ—Å—å)
            if BASE_URL:
                try:
                    await _app_tg.bot.delete_webhook(drop_pending_updates=False)
                    await _app_tg.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
                    log.info("PTB: webhook confirmed at %s", WEBHOOK_URL)
                except Exception:
                    log.exception("PTB: set_webhook failed (background)")

        _loop_tg.run_until_complete(_async_bootstrap())

        _ready_evt.set()
        # —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ ‚Äî —Å–ª–∏—Ç—å –≤—Å—ë, —á—Ç–æ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å
        _drain_buffer("startup")

        # –¥–µ—Ä–∂–∏–º –ª—É–ø –∂–∏–≤—ã–º –¥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤
        while not _stop_evt.is_set():
            _loop_tg.run_until_complete(asyncio.sleep(0.2))

        # –ê–∫–∫—É—Ä–∞—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        async def _async_shutdown():
            try:
                await _app_tg.stop()
            finally:
                await _app_tg.shutdown()

        _loop_tg.run_until_complete(_async_shutdown())
        log.info("PTB: stopped")

    except Exception:
        log.exception("PTB thread crashed")
    finally:
        try:
            import asyncio
            if _loop_tg and _loop_tg.is_running():
                _loop_tg.stop()
        except Exception:
            pass

# –ó–∞–ø—É—Å–∫–∞–µ–º PTB-—Ç—Ä–µ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–Ω–æ
_t = threading.Thread(target=_ptb_thread, name="ptb-thread", daemon=True)
_t.start()

# ----------------------- Flask: –º–∞—Ä—à—Ä—É—Ç—ã -----------------------

@app_flask.get("/")
def health():
    # –ø—Ä–æ—Å—Ç–æ "–∂–∏–≤–æ–π" –æ—Ç–≤–µ—Ç –¥–ª—è Render
    return "OK", 200

@app_flask.post(f"/webhook/{WEBHOOK_PATH}")
def webhook():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ Telegram
    hdr = request.headers.get("X-Telegram-Bot-Api-Secret-Token", "")
    if hdr != WEBHOOK_SECRET:
        return "forbidden", 403

    try:
        data = request.get_json(force=True, silent=False)  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–ª–æ–≤–∞—Ä—å
    except Exception:
        log.exception("Webhook: bad JSON")
        return "bad json", 400

    # –ï—Å–ª–∏ PTB —É–∂–µ –≥–æ—Ç–æ–≤ ‚Äî —Å—Ä–∞–∑—É –æ—Ç–¥–∞—ë–º –≤ –Ω–µ–≥–æ
    if _ready_evt.is_set():
        _submit_update_json(data)
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ—à–ª–∏ –≤ ready ‚Äî –¥–æ–±—å—ë–º –±—É—Ñ–µ—Ä
        _drain_buffer("webhook")
        return jsonify(ok=True)

    # –ò–Ω–∞—á–µ ‚Äî –±—É—Ñ–µ—Ä–∏–∑—É–µ–º (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–æ—Å—Ç)
    if len(_buffer) >= _BUFFER_MAX:
        # —Å—Ç–∞—Ä–æ–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑—Ä–∞—Å—Ç–∞—Ç—å—Å—è –¥–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
        _buffer.popleft()
    _buffer.append(data)
    log.warning("Buffered update while PTB not ready (queue=%d)", len(_buffer))
    return jsonify(ok=True)

# ----------------------- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤–æ—Ä–∫–µ—Ä–∞ -----------------------

def _set_webhook_once():
    """–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ —Å—Ä–∞–∑—É –∂–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤–æ—Ä–∫–µ—Ä–∞ gunicorn."""
    if not BASE_URL:
        log.warning("BASE_URL is empty ‚Äî webhook will not be set automatically")
        return
    try:
        import httpx
        # –£–¥–∞–ª—è–µ–º –∏ —Å—Ç–∞–≤–∏–º –∑–∞–Ω–æ–≤–æ (–Ω–∞–¥—ë–∂–Ω–µ–µ –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö —Ä–µ—Å—Ç–∞—Ä—Ç–∞—Ö)
        with httpx.Client(timeout=10.0) as cl:
            cl.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/deleteWebhook")
            r = cl.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook",
                json={"url": WEBHOOK_URL, "secret_token": WEBHOOK_SECRET},
            )
            r.raise_for_status()
        log.info("Webhook set to %s", WEBHOOK_URL)
    except Exception:
        log.exception("Failed to set webhook via HTTP")

# –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ ‚Äî —ç—Ç–æ –±—ã—Å—Ç—Ä–æ, —á—Ç–æ–±—ã Telegram –Ω–µ —Å–ª–∞–ª –≤ —Å—Ç–∞—Ä–æ–µ –º–µ—Å—Ç–æ
_set_webhook_once()

# ----------------------- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ -----------------------

def _graceful_shutdown(reason: str):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ SIGTERM/atexit: –¥–æ–∂–∏–º–∞–µ–º –±—É—Ñ–µ—Ä –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≥–∞—Å–∏–º PTB."""
    log.info("Shutdown requested (%s). Flushing buffer & stopping PTB ...", reason)
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è
    _stop_evt.set()
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–ª–∏—Ç—å –±—É—Ñ–µ—Ä (–µ—Å–ª–∏ PTB —É–∂–µ —É—Å–ø–µ–ª —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å)
    _drain_buffer("shutdown")
    # –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥—ë–º, —á—Ç–æ–±—ã PTB —É—Å–ø–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
    t0 = time.time()
    while _ready_evt.is_set() and (time.time() - t0) < 2.0 and _buffer:
        time.sleep(0.05)
    try:
        _t.join(timeout=3.0)
    except Exception:
        pass

def _on_sigterm(_sig, _frm):
    _graceful_shutdown("SIGTERM")

signal.signal(signal.SIGTERM, _on_sigterm)
atexit.register(lambda: _graceful_shutdown("atexit"))

# ----------------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞) -----------------------

if __name__ == "__main__":
    # –õ–æ–∫–∞–ª—å–Ω–æ: uvicorn/flask –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏). –ù–∞ Render —Ä–∞–±–æ—Ç–∞–µ—Ç gunicorn.
    app_flask.run(host="0.0.0.0", port=PORT)
