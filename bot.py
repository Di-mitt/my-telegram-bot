# bot.py
from __future__ import annotations

import os
import json
import logging
import asyncio
import threading
from typing import Optional

from flask import Flask, request, abort
from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# -------------------- logging --------------------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# -------------------- env --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")                    # e.g. https://my-telegram-bot-xxxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "change-me")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# -------------------- Flask app --------------------
app_flask = Flask(__name__)

# -------------------- PTB globals --------------------
_app: Optional[Application] = None
_loop: asyncio.AbstractEventLoop = asyncio.new_event_loop()
_ready = threading.Event()  # —Å—Ç–∞–Ω–µ—Ç True, –∫–æ–≥–¥–∞ PTB –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∏ –≤–µ–±—Ö—É–∫ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω


# -------------------- handlers --------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.text:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")


# -------------------- PTB startup in background loop --------------------
async def _ptb_init_and_run() -> None:
    """–°–æ–∑–¥–∞—ë–º Application, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ (–±–µ–∑ —Å–∏–≥–Ω–∞–ª–æ–≤) –∏ —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫."""
    global _app

    log.info("PTB: building application...")
    _app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .build()
    )

    # handlers
    _app.add_handler(CommandHandler("start", cmd_start))
    _app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –°—Ç–∞—Ä—Ç –±–µ–∑ —Å–∏–≥–Ω–∞–ª—å–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    await _app.initialize()
    await _app.start()

    # –í–µ–±—Ö—É–∫ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    log.info("PTB: setting webhook to %s", WEBHOOK_URL)
    await _app.bot.delete_webhook(drop_pending_updates=True)
    await _app.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
    log.info("PTB: webhook is set")

    # –°–æ–æ–±—â–∞–µ–º Flask, —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã
    _ready.set()

    # –¥–µ—Ä–∂–∏–º –ª—É–ø –∂–∏–≤—ã–º
    await asyncio.Event().wait()


def _ptb_thread_worker() -> None:
    asyncio.set_event_loop(_loop)
    try:
        _loop.run_until_complete(_ptb_init_and_run())
    except Exception:
        log.exception("PTB thread crashed")
    finally:
        try:
            _loop.run_until_complete(_app.stop()) if _app else None
        except Exception:
            pass
        try:
            _loop.close()
        except Exception:
            pass


# –°—Ç–∞—Ä—Ç—É–µ–º PTB –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è (–¥–ª—è gunicorn worker‚Äô–∞).
_thread = threading.Thread(target=_ptb_thread_worker, name="ptb-loop", daemon=True)
_thread.start()


# -------------------- Flask routes --------------------
@app_flask.get("/")
def health() -> tuple[str, int]:
    return "OK", 200


@app_flask.post(WEBHOOK_PATH)
def webhook_receiver():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    secret_hdr = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret_hdr != WEBHOOK_SECRET:
        return abort(403)

    # –ï—Å–ª–∏ PTB –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ–±—ã –¢–µ–ª–µ–≥—Ä–∞–º –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
    if not _ready.is_set():
        log.warning("Received update, but PTB is not ready yet (buffered)")
        return "ok", 200

    try:
        # JSON –∞–ø–¥–µ–π—Ç–∞
        data = request.get_json(force=True, silent=False)
        if not data:
            return "ok", 200

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Update –∏ –∫–ª–∞–¥—ë–º –≤ –æ—á–µ—Ä–µ–¥—å PTB –∏–∑ –µ–≥–æ event-loop‚Äô–∞
        upd = Update.de_json(data, _app.bot)

        fut = asyncio.run_coroutine_threadsafe(_app.update_queue.put(upd), _loop)
        # –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç, –Ω–æ –Ω–∞ —Å–ª—É—á–∞–π –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É–µ–º
        try:
            fut.result(timeout=0.5)
        except Exception:
            log.exception("Failed to enqueue update")

        return "ok", 200

    except Exception:
        log.exception("Error in webhook_receiver")
        return "ok", 200


# -------------------- local run (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ Render) --------------------
if __name__ == "__main__":
    # –õ–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å Flask –¥–ª—è health –∏ webhook-–ø—Ä–∏—ë–º–∞
    app_flask.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
