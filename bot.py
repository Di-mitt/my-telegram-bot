# bot.py
import os
import sys
import json
import logging
import threading
import atexit
import asyncio
from typing import Optional

from flask import Flask, request, jsonify, Response

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# -----------------------------------------------------------------------------
# –ö–æ–Ω—Ñ–∏–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------------------------------------------------------
LOG_LEVEL = os.environ.get("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    stream=sys.stdout,
)
log = logging.getLogger("bot")

BOT_TOKEN = os.environ.get("BOT_TOKEN", "").strip()
APP_URL = os.environ.get("APP_URL", "").strip().rstrip("/")
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "mySecret_2025").strip()

if not BOT_TOKEN:
    log.error("Environment variable BOT_TOKEN is not set")
    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Render: –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ ‚Äî –ø–∞–¥–∞–µ–º, —á—Ç–æ–±—ã –±—ã–ª–æ –∑–∞–º–µ—Ç–Ω–æ
    raise SystemExit(1)

if not APP_URL:
    log.warning("APP_URL is not set; using http://0.0.0.0:10000 for local runs")
    APP_URL = "http://0.0.0.0:10000"

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# -----------------------------------------------------------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã PTB –∏ –µ–≥–æ loop/—Ñ–ª–∞–≥–∏
# -----------------------------------------------------------------------------
_ptb_loop: Optional[asyncio.AbstractEventLoop] = None
_ptb_app: Optional[Application] = None
_ptb_ready = threading.Event()          # True –∫–æ–≥–¥–∞ PTB –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤
_ptb_stop_event: Optional[asyncio.Event] = None

# -----------------------------------------------------------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞
# -----------------------------------------------------------------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ\n"
        "–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî —è –ø–æ–≤—Ç–æ—Ä—é.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /start, /help"
    )

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help ‚Äî —ç—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞"
    )

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        await update.message.reply_text(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {update.message.text}")

# -----------------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞—Ä—Ç–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ PTB (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏ –æ—Ç–¥–µ–ª—å–Ω–æ–º event loop)
# -----------------------------------------------------------------------------
async def _ptb_async_main():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ event loop.
    –°–æ–∑–¥–∞–µ—Ç Application, –¥–æ–±–∞–≤–ª—è–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä—ã, —Å—Ç–∞—Ä—Ç—É–µ—Ç, —Å—Ç–∞–≤–∏—Ç –≤–µ–±—Ö—É–∫ –∏ –∂–¥–µ—Ç —Å—Ç–æ–ø–∞.
    """
    global _ptb_app, _ptb_stop_event

    log.info("PTB: building application...")
    app = Application.builder().token(BOT_TOKEN).build()

    # –•—ç–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è/—Å—Ç–∞—Ä—Ç
    await app.initialize()
    await app.start()

    # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï —Å—Ç–∞—Ä—Ç–∞ PTB
    try:
        await app.bot.delete_webhook()
        await app.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
        log.info("PTB: webhook is set -> %s", WEBHOOK_URL)
    except Exception:
        log.exception("PTB: failed to set webhook")

    # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Flask, —á—Ç–æ –º–æ–∂–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã
    _ptb_ready.set()
    _ptb_app = app

    # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
    _ptb_stop_event = asyncio.Event()
    await _ptb_stop_event.wait()

    # –ê–∫–∫—É—Ä–∞—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    log.info("PTB: stopping application...")
    try:
        await app.stop()
        await app.shutdown()
        await app.post_stop()
    except Exception:
        log.exception("PTB: error while stopping")

def _ptb_thread_runner():
    """
    –¶–µ–ª—å —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞: —Å–æ–∑–¥–∞—Ç—å loop –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å _ptb_async_main.
    """
    global _ptb_loop
    loop = asyncio.new_eventLoop() if hasattr(asyncio, "new_eventLoop") else asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    _ptb_loop = loop
    try:
        loop.run_until_complete(_ptb_async_main())
    finally:
        try:
            pending = asyncio.all_tasks(loop)
            for t in pending:
                t.cancel()
            loop.run_until_complete(loop.shutdown_asyncgens())
        except Exception:
            pass
        loop.close()
        log.info("PTB: event loop closed")

def start_ptb_background():
    t = threading.Thread(target=_ptb_thread_runner, name="ptb-runner", daemon=True)
    t.start()
    return t

def stop_ptb_background():
    if _ptb_loop and _ptb_stop_event:
        try:
            _ptb_loop.call_soon_threadsafe(_ptb_stop_event.set)
        except Exception:
            pass

# -----------------------------------------------------------------------------
# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# -----------------------------------------------------------------------------
app_flask = Flask(__name__)

@app_flask.get("/")
def root():
    return Response("ok", status=200, mimetype="text/plain")

@app_flask.get("/health")
def health():
    return jsonify(
        status="ok",
        ptb_ready=_ptb_ready.is_set(),
        webhook_url=WEBHOOK_URL,
    )

@app_flask.post(WEBHOOK_PATH)
def telegram_webhook():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    header_secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token", "")
    if header_secret != WEBHOOK_SECRET:
        log.warning("Webhook: secret mismatch")
        return ("", 403)

    # –ï—Å–ª–∏ PTB –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º (Telegram –ø–æ—Ç–æ–º —Ä–µ—Ç—Ä–∞–π–Ω–µ—Ç)
    if not _ptb_ready.is_set() or _ptb_app is None or _ptb_loop is None:
        log.warning("Webhook: got update while PTB not ready (no-buffer mode)")
        return ("", 200)

    # JSON –∞–ø–¥–µ–π—Ç–∞
    data = request.get_json(silent=True, force=True) or {}
    try:
        update = Update.de_json(data, _ptb_app.bot)
    except Exception:
        log.exception("Webhook: failed to parse update JSON")
        return ("", 200)

    # –ü–µ—Ä–µ–¥–∞–µ–º –∞–ø–¥–µ–π—Ç –≤ PTB –≤–Ω—É—Ç—Ä–∏ –µ–≥–æ event loop
    try:
        fut = asyncio.run_coroutine_threadsafe(_ptb_app.process_update(update), _ptb_loop)
        # –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º—Å—è –Ω–∞–¥–æ–ª–≥–æ; –æ—à–∏–±–æ–∫ –∂–¥–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        _ = fut.result(timeout=0.5) if _ptb_loop.is_running() else None
    except Exception:
        # –î–∞–∂–µ –µ—Å–ª–∏ —Ç—É—Ç –æ—à–∏–±–∫–∞ ‚Äî –¥–ª—è Telegram –ª—É—á—à–µ –æ—Ç–≤–µ—Ç–∏—Ç—å 200,
        # —á—Ç–æ–±—ã –æ–Ω –Ω–µ –∑–∞—Å—ã–ø–∞–ª –Ω–∞—à endpoint –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ —Ä–µ—Ç—Ä–∞—è–º–∏.
        log.exception("Webhook: error while scheduling update in PTB")

    return ("", 200)

# –†—É—á–Ω–æ–π —Ä–µ—Å–µ—Ç –≤–µ–±—Ö—É–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
@app_flask.post("/admin/reset_webhook")
def reset_webhook():
    if not _ptb_ready.is_set() or _ptb_app is None or _ptb_loop is None:
        return jsonify(ok=False, error="PTB not ready"), 503

    async def _reset():
        await _ptb_app.bot.delete_webhook()
        await _ptb_app.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
        return True

    try:
        fut = asyncio.run_coroutine_threadsafe(_reset(), _ptb_loop)
        fut.result(timeout=5)
        return jsonify(ok=True, url=WEBHOOK_URL)
    except Exception as e:
        log.exception("admin/reset_webhook failed")
        return jsonify(ok=False, error=str(e)), 500

# -----------------------------------------------------------------------------
# –ó–∞–ø—É—Å–∫ PTB –≤ —Ñ–æ–Ω–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
# -----------------------------------------------------------------------------
_ptb_thread = start_ptb_background()

# –ß–∏—Å—Ç–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Ä–∫–µ—Ä–∞
@atexit.register
def _graceful_shutdown():
    stop_ptb_background()
