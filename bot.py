# bot.py
from __future__ import annotations

import os
import logging
import asyncio
from threading import Thread
from typing import Optional

from flask import Flask, request, abort

from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# -------------------- ENV --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # –ø—Ä–∏–º–µ—Ä: https://my-telegram-bot-xxxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# -------------------- Flask --------------------
app_flask = Flask(__name__)

# -------------------- PTB application + event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –Ω–∏—Ç–∏ --------------------
app_tg: Optional[Application] = None
_loop: Optional[asyncio.AbstractEventLoop] = None


def _loop_runner(loop: asyncio.AbstractEventLoop) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –Ω–∏—Ç–∏."""
    asyncio.set_event_loop(loop)
    loop.run_forever()


async def _ptb_init_and_start(application: Application) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PTB –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–≤ —Ç–æ–º –∂–µ loop)."""
    await application.initialize()
    await application.start()

    # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫
    try:
        await application.bot.delete_webhook(drop_pending_updates=True)
        await application.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
        log.info("Webhook set to %s", WEBHOOK_URL)
    except Exception:
        log.exception("Failed to set webhook")


def _ensure_started() -> None:
    """–°–æ–∑–¥–∞—ë–º PTB app –∏ loop –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏."""
    global app_tg, _loop

    if app_tg is not None and _loop is not None:
        return

    # 1) PTB app
    app_tg = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .concurrent_updates(False)  # –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        .build()
    )

    # Handlers
    async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")

    async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        if update.message and update.message.text:
            await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")

    app_tg.add_handler(CommandHandler("start", start_cmd))
    app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # 2) –û—Ç–¥–µ–ª—å–Ω—ã–π event loop –≤ —Ñ–æ–Ω–æ–≤–æ–π –Ω–∏—Ç–∏
    _loop = asyncio.new_event_loop()
    thread = Thread(target=_loop_runner, args=(_loop,), daemon=True)
    thread.start()

    # 3) –ó–∞–ø—É—Å–∫–∞–µ–º PTB –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ loop
    fut = asyncio.run_coroutine_threadsafe(_ptb_init_and_start(app_tg), _loop)
    # –∂–¥–∞—Ç—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ; –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ ‚Äî –º–æ–∂–Ω–æ fut.result(timeout=10)


# -------------------- Flask routes --------------------
@app_flask.route("/", methods=["GET"])
def health():
    _ensure_started()
    return "OK", 200


@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook_handler():
    _ensure_started()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != WEBHOOK_SECRET:
        return abort(403)

    try:
        data = request.get_json(force=True, silent=False)
        log.info("Webhook JSON: %s", data)

        update = Update.de_json(data, app_tg.bot)  # type: ignore[arg-type]

        # –û—Ç–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ä–∞–∑—É –≤ PTB –≤ –µ–≥–æ loop
        asyncio.run_coroutine_threadsafe(app_tg.process_update(update), _loop)  # type: ignore[arg-type]

        # –í–∞–∂–Ω–æ: –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200 –±—ã—Å—Ç—Ä–æ, —á—Ç–æ–±—ã TG –Ω–µ –ø—ã—Ç–∞–ª—Å—è —Ä–µ—Ç—Ä–∞–∏—Ç—å
        return "ok", 200
    except Exception:
        log.exception("Error in webhook handler")
        return "ok", 200


# -------------------- gunicorn entry --------------------
# Procfile –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å:
# web: gunicorn bot:app_flask
#
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render:
# BOT_TOKEN=<—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω>
# APP_URL=https://my-telegram-bot-cr3q.onrender.com
# WEBHOOK_SECRET=mySecret_2025
