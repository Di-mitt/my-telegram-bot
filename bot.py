# bot.py
from __future__ import annotations

import os
import logging
from typing import Optional

from flask import Flask, request, abort

from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# -------------------- –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ --------------------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# -------------------- –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://my-telegram-bot-xxxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# -------------------- Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ --------------------
app_flask = Flask(__name__)

# Telegram Application (—Å–æ–∑–¥–∞–¥–∏–º –Ω–∏–∂–µ)
app_tg: Optional[Application] = None


# -------------------- handlers --------------------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏ –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")
    except Exception:
        log.exception("Error in /start handler")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if update.message and update.message.text:
            await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")
    except Exception:
        log.exception("Error in echo handler")


# -------------------- webhook lifecycle --------------------
async def on_startup(application: Application) -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ –∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π —Å —Å–µ–∫—Ä–µ—Ç–æ–º."""
    log.info("Setting webhook to %s", WEBHOOK_URL)
    await application.bot.delete_webhook(drop_pending_updates=True)
    await application.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
    log.info("Webhook is set")


# -------------------- Flask routes --------------------
@app_flask.route("/", methods=["GET"])
def health() -> tuple[str, int]:
    # –ø—Ä–æ—Å—Ç–æ–π healthcheck, –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å 500
    return "OK", 200


@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook_handler():
    """–ü—Ä–∏—ë–º –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram. –ú–∞–∫—Å–∏–º—É–º –∑–∞—â–∏—Ç –æ—Ç 500."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != WEBHOOK_SECRET:
        # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–µ–º 403 (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —É–≤–∏–¥–∏—Ç–µ –≤ –ª–æ–≥–∞—Ö –∫–∞–∫ 403)
        return abort(403)

    try:
        data = request.get_json(force=True, silent=False)
        if not data:
            log.warning("Empty JSON in webhook")
            return "ok", 200

        if not app_tg:
            log.error("app_tg is not initialized")
            return "ok", 200

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ Update –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å PTB
        update = Update.de_json(data, app_tg.bot)
        app_tg.update_queue.put_nowait(update)
        return "ok", 200

    except Exception:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë, –Ω–æ –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ —Å—á–∏—Ç–∞–ª —ç—Ç–æ 500
        log.exception("Error in webhook_handler")
        return "ok", 200


# -------------------- entrypoint --------------------
if __name__ == "__main__":
    # –°–æ–∑–¥–∞—ë–º Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app_tg = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .build()
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app_tg.add_handler(CommandHandler("start", start_cmd))
    app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –ó–∞–ø—É—Å–∫–∞–µ–º PTB –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞ (PTB —Å–∞–º –ø–æ–¥–Ω–∏–º–µ—Ç –ø–æ—Ç–æ–∫-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫),
    # –∞ Flask –æ—Å—Ç–∞—ë—Ç—Å—è WSGI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è Render (—Å–º. Procfile).
    app_tg.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        url_path=WEBHOOK_PATH,
        webhook_url=WEBHOOK_URL,
        secret_token=WEBHOOK_SECRET,
        on_startup=[on_startup],
    )
