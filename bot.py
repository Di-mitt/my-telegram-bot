# bot.py
from __future__ import annotations

import atexit
import logging
import os
import threading
from queue import Queue, Empty
from typing import Optional

from flask import Flask, request, abort

from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# ===================== –õ–û–ì–ò =====================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("bot")

# ===================== ENV =====================
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # –Ω–∞–ø—Ä.: https://my-telegram-bot-xxxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# ===================== –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï =====================
app_flask = Flask(__name__)

_ptb_app: Optional[Application] = None
_ptb_ready = threading.Event()          # —è–¥—Ä–æ PTB –≥–æ—Ç–æ–≤–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã
_stop_event = threading.Event()         # —Å–∏–≥–Ω–∞–ª –Ω–∞ –º—è–≥–∫—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
_buffer: "Queue[dict]" = Queue()        # –±—É—Ñ–µ—Ä –≤—Ö–æ–¥—è—â–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤ (–ø–æ–∫–∞ PTB —Å—Ç–∞—Ä—Ç—É–µ—Ç)


# ===================== PTB HANDLERS =====================
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.text:
        await update.message.reply_text(update.message.text)


# ===================== –°–õ–£–ñ–ï–ë–ù–û–ï =====================
def _drain_buffer() -> None:
    """–°–ª–∏—Ç—å –±—É—Ñ–µ—Ä –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å PTB."""
    global _ptb_app
    if not _ptb_app:
        return
    drained = 0
    while True:
        try:
            json_obj = _buffer.get_nowait()
        except Empty:
            break
        try:
            upd = Update.de_json(json_obj, _ptb_app.bot)
            _ptb_app.update_queue.put_nowait(upd)
            drained += 1
        except Exception:
            log.exception("Failed to enqueue buffered update")
    if drained:
        log.info("Buffered updates delivered: %s", drained)


def _ptb_runner() -> None:
    """
    –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º async loop –¥–ª—è PTB:
    - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    - —Å—Ç–∞–≤–∏—Ç –≤–µ–±—Ö—É–∫
    - –ø–æ–º–µ—á–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏ —Å–ª–∏–≤–∞–µ—Ç –±—É—Ñ–µ—Ä
    - –¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º –¥–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    """
    import asyncio

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    async def _main():
        global _ptb_app

        # –°–æ–∑–¥–∞—ë–º PTB Application
        _ptb_app = (
            ApplicationBuilder()
            .token(BOT_TOKEN)
            .build()
        )

        # –•–µ–Ω–¥–ª–µ—Ä—ã
        _ptb_app.add_handler(CommandHandler("start", start_cmd))
        _ptb_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

        # –°—Ç–∞—Ä—Ç PTB (–±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
        await _ptb_app.initialize()
        await _ptb_app.start()

        # –°—Ç–∞–≤–∏–º (–∏–ª–∏ –ø–µ—Ä–µ-—Å—Ç–∞–≤–ª—è–µ–º) –≤–µ–±—Ö—É–∫
        try:
            await _ptb_app.bot.delete_webhook(drop_pending_updates=False)
            await _ptb_app.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
            log.info("Webhook set to %s", WEBHOOK_URL)
        except Exception:
            log.exception("Failed to set webhook")

        # –¢–µ–ø–µ—Ä—å –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã –∏–∑ Flask
        _ptb_ready.set()
        _drain_buffer()

        # –î–µ—Ä–∂–∏–º —Ü–∏–∫–ª –∂–∏–≤—ã–º, –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–¥—ë—Ç —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        while not _stop_event.is_set():
            await asyncio.sleep(0.5)

        # –ú—è–≥–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        try:
            await _ptb_app.stop()
            await _ptb_app.shutdown()
        except Exception:
            log.exception("Error during PTB shutdown")

    try:
        loop.run_until_complete(_main())
    finally:
        try:
            loop.run_until_complete(loop.shutdown_asyncgens())
        except Exception:
            pass
        loop.close()


# –ó–∞–ø—É—Å–∫–∞–µ–º PTB-–ø–æ—Ç–æ–∫ –ø—Ä–∏ –∏–º–ø–æ—Ä—Çe –º–æ–¥—É–ª—è (–∫–æ–≥–¥–∞ gunicorn –ø–æ–¥–Ω–∏–º–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä–∞)
_ptb_thread = threading.Thread(target=_ptb_runner, name="ptb-runner", daemon=True)
_ptb_thread.start()


@atexit.register
def _on_exit():
    # –°–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É PTB –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
    _stop_event.set()
    if _ptb_thread.is_alive():
        _ptb_thread.join(timeout=5)


# ===================== FLASK ROUTES =====================
@app_flask.route("/", methods=["GET"])
def health() -> tuple[str, int]:
    return "OK", 200


@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook() -> tuple[str, int]:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç (Telegram –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ)
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != WEBHOOK_SECRET:
        # –ù–µ –Ω–∞—à –∑–∞–ø—Ä–æ—Å ‚Äî 403
        return abort(403)

    try:
        data = request.get_json(force=True, silent=False)
    except Exception:
        log.exception("Bad JSON")
        return "ok", 200

    if not data:
        return "ok", 200

    # –ï—Å–ª–∏ PTB –µ—â—ë –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è ‚Äî –∫–ª–∞–¥—ë–º –∞–ø–¥–µ–π—Ç –≤ –±—É—Ñ–µ—Ä,
    # —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ –≤–æ—Ä–∫–µ—Ä–∞.
    if not _ptb_ready.is_set():
        _buffer.put_nowait(data)
        log.warning("Received update, but PTB is not ready yet (buffer=%d)", _buffer.qsize())
        return "ok", 200

    # PTB —É–∂–µ –≥–æ—Ç–æ–≤ ‚Äî —Å—Ä–∞–∑—É –æ—Ç–¥–∞—ë–º –∞–ø–¥–µ–π—Ç –≤ –æ—á–µ—Ä–µ–¥—å
    try:
        if _ptb_app is not None:
            upd = Update.de_json(data, _ptb_app.bot)
            _ptb_app.update_queue.put_nowait(upd)
    except Exception:
        log.exception("Failed to enqueue update")

    return "ok", 200
