# bot.py
from __future__ import annotations

import os
import time
import json
import asyncio
import logging
import threading
from typing import Optional

from flask import Flask, request, abort

from telegram import Update, Bot
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram.error import RetryAfter

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# -------------------- ENV --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://my-telegram-bot-xxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# -------------------- Flask (WSGI) --------------------
app_flask = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ PTB
app_tg: Optional[Application] = None


# -------------------- handlers --------------------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏ –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.text:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")


# -------------------- healthcheck --------------------
@app_flask.route("/", methods=["GET"])
def health() -> tuple[str, int]:
    return "OK", 200


# -------------------- Webhook endpoint --------------------
@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook_handler():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç Telegram
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        abort(403)

    # PTB –µ—â—ë –Ω–µ —É—Å–ø–µ–ª –ø–æ–¥–Ω—è—Ç—å—Å—è
    if app_tg is None:
        log.error("Webhook got request, but bot is not ready yet")
        return "ok", 200

    try:
        data = request.get_json(force=True, silent=False)
        if not data:
            return "ok", 200

        # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º JSON -> Update –∏ –∫–∏–¥–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å PTB
        update = Update.de_json(data, app_tg.bot)
        app_tg.update_queue.put_nowait(update)
    except Exception:
        log.exception("Error in webhook_handler")
    return "ok", 200


# -------------------- –∑–∞–ø—É—Å–∫ PTB --------------------
def _run_bot() -> None:
    """–ü–æ–¥–Ω–∏–º–∞–µ—Ç PTB –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç. –í–µ–±—Ö—É–∫ —Å—Ç–∞–≤–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ."""
    global app_tg

    log.info("Starting PTB Application...")
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_cmd))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –î–µ–ª–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è Flask webhook
    app_tg = application

    # IMPORTANT: –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º webhook_url/secret_token –∑–¥–µ—Å—å,
    # —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å setWebhook –∏ –Ω–µ –ª–æ–≤–∏—Ç—å RetryAfter.
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        url_path=WEBHOOK_PATH,
        # PTB —Å–∞–º –æ—Ç–¥–∞—Å—Ç 200 –Ω–∞ GET / –∏ –ø–æ–≤–µ—Å–∏—Ç HTTP —Å–µ—Ä–≤–µ—Ä;
        # —Å–∞–º –≤–µ–±—Ö—É–∫ –º—ã –≤—ã—Å—Ç–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ –Ω–∏–∂–µ.
    )


# -------------------- –æ—Ç–¥–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ --------------------
async def _set_webhook_once():
    """–°—Ç–∞–≤–∏—Ç webhook c –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –Ω–∞ —Å–ª—É—á–∞–π RetryAfter."""
    bot = Bot(BOT_TOKEN)

    for attempt in range(5):
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            await bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
            log.info("Webhook set to %s", WEBHOOK_URL)
            return
        except RetryAfter as e:
            wait_s = int(getattr(e, "retry_after", 1)) + 1
            log.warning(
                "setWebhook rate-limited. Retry in %s s (attempt %s/5)",
                wait_s, attempt + 1
            )
            await asyncio.sleep(wait_s)
        except Exception:
            log.exception("Failed to set webhook (attempt %s/5)", attempt + 1)
            await asyncio.sleep(2)

    log.error("Giving up setting webhook after 5 attempts")


def _set_webhook_later():
    # –ß—É—Ç—å –∂–¥—ë–º, —á—Ç–æ–±—ã HTTP-—Å–µ—Ä–≤–µ—Ä PTB –Ω–∞—á–∞–ª —Å–ª—É—à–∞—Ç—å –ø–æ—Ä—Ç
    time.sleep(2)
    try:
        asyncio.run(_set_webhook_once())
    except Exception:
        log.exception("set_webhook_later crashed")


# -------------------- entrypoint --------------------
if __name__ == "__main__":
    # 1) –ø–æ–¥–Ω–∏–º–∞–µ–º PTB –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=_run_bot, daemon=True).start()
    # 2) –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º webhook (—Å —Ä–µ—Ç—Ä–∞—è–º–∏)
    threading.Thread(target=_set_webhook_later, daemon=True).start()
