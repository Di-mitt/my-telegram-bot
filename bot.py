# bot.py
from __future__ import annotations

import os
import threading
import asyncio
import logging
from typing import Optional

from flask import Flask, request, abort
from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# -------------------- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("bot")

# -------------------- –æ–∫—Ä—É–∂–µ–Ω–∏–µ ----------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # https://my-telegram-bot-xxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# -------------------- Flask --------------------------
app_flask = Flask(__name__)

# –°—é–¥–∞ –ø–æ–ª–æ–∂–∏–º PTB-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ñ–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
application: Optional[Application] = None
ptb_ready = threading.Event()


# -------------------- handlers -----------------------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.text:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")


# -------------------- –∑–∞–ø—É—Å–∫ PTB –≤ –ø–æ—Ç–æ–∫–µ -------------
def _ptb_thread() -> None:
    """
    –û—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º event loop:
    - initialize() / start()
    - –≤—ã—Å—Ç–∞–≤–ª—è–µ–º webhook –ü–û–°–õ–ï —Å—Ç–∞—Ä—Ç–∞
    - –¥–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∂–∏–≤—ã–º
    """
    global application
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    async def runner():
        global application
        application = (
            ApplicationBuilder()
            .token(BOT_TOKEN)
            .concurrent_updates(True)
            .build()
        )

        # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers
        application.add_handler(CommandHandler("start", start_cmd))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

        # –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π lifecycle –≤—Ä—É—á–Ω—É—é
        await application.initialize()
        await application.start()

        # —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫
        await application.bot.delete_webhook(drop_pending_updates=True)
        await application.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
        log.info("Webhook set to %s", WEBHOOK_URL)

        # –¥–∞—ë–º Flask –∑–Ω–∞—Ç—å, —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã
        ptb_ready.set()

        # –¥–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´–≤–µ—á–Ω–æ¬ª
        await asyncio.Event().wait()

    try:
        loop.run_until_complete(runner())
    except Exception:
        log.exception("PTB thread crashed")
    finally:
        try:
            loop.run_until_complete(application.stop())  # type: ignore[arg-type]
            loop.run_until_complete(application.shutdown())  # type: ignore[arg-type]
        except Exception:
            pass
        loop.close()


# –°—Ç–∞—Ä—Ç—É–µ–º –ø–æ—Ç–æ–∫ PTB –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
_t = threading.Thread(target=_ptb_thread, name="ptb-thread", daemon=True)
_t.start()


# -------------------- Flask routes --------------------
@app_flask.route("/", methods=["GET"])
def health() -> tuple[str, int]:
    # –ü—Ä–æ—Å—Ç–æ–π healthcheck
    return ("OK", 200)


@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook_receiver():
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç Telegram
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return abort(403)

    # –µ—Å–ª–∏ PTB –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤ ‚Äî –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª,
    # –Ω–æ –∞–ø–¥–µ–π—Ç –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–ø–æ—á—Ç–∏ —Å—Ä–∞–∑—É —Å—Ç–∞–Ω–µ—Ç –≥–æ—Ç–æ–≤).
    if not ptb_ready.is_set():
        log.warning("Received update, but PTB not ready yet")
        return ("ok", 200)

    try:
        data = request.get_json(force=True, silent=False)
    except Exception:
        log.exception("Bad JSON in webhook")
        return ("ok", 200)

    if not data:
        return ("ok", 200)

    # –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –∞–ø–¥–µ–π—Ç –≤ –æ—á–µ—Ä–µ–¥—å PTB
    try:
        upd = Update.de_json(data, application.bot)  # type: ignore[union-attr]
        application.update_queue.put_nowait(upd)     # type: ignore[union-attr]
    except Exception:
        log.exception("Failed to enqueue update")

    return ("ok", 200)
    return "ok", 200
    
