# bot.py
from __future__ import annotations

import os
import json
import logging
import threading
import asyncio
from typing import Optional

from flask import Flask, request, abort
from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–û–ì–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: 123456:AA... 
APP_URL = os.getenv("APP_URL")      # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://my-telegram-bot-xxxxx.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mySecret_2025")

if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("Set env vars BOT_TOKEN and APP_URL")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ì–õ–û–ë–ê–õ–¨–ù–´–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app_flask = Flask(__name__)                 # WSGI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Render
app_tg: Optional[Application] = None        # PTB Application (—Å–æ–∑–¥–∞–¥–∏–º –≤ —Ñ–æ–Ω–µ)

_bot_lock = threading.Lock()                # —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤–∞–∂–¥—ã
_bot_started = False
_bot_ready = threading.Event()              # —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è True, –∫–æ–≥–¥–∞ –±–æ—Ç –≥–æ—Ç–æ–≤

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HANDLERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏ –Ω–∞ —Å–≤—è–∑–∏ ü§ñ")
    except Exception:
        log.exception("Error in /start handler")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if update.message and update.message.text:
            await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")
    except Exception:
        log.exception("Error in echo handler")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–ê–ü–£–°–ö PTB –í –§–û–ù–û–í–û–ú –ü–û–¢–û–ö–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _async_start_bot() -> None:
    """–°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º PTB Application –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º asyncio-—Ü–∏–∫–ª–µ."""
    global app_tg

    app_tg = ApplicationBuilder().token(BOT_TOKEN).build()
    app_tg.add_handler(CommandHandler("start", start_cmd))
    app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # initialize/start –∑–∞–ø—É—Å–∫–∞—é—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–∞—Å–∫–∏, –æ—á–µ—Ä–µ–¥—å –∞–ø–¥–µ–π—Ç–æ–≤ –∏ —Ç.–¥.
    await app_tg.initialize()
    await app_tg.start()

    # –í–ê–ñ–ù–û: –ø–æ–º–µ—á–∞–µ–º –±–æ—Ç–∞ –≥–æ—Ç–æ–≤—ã–º –î–û —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞,
    # —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–∏—à—ë–ª "—Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ".
    _bot_ready.set()
    log.info("Bot core is ready, setting webhook...")

    # –°—Ç–∞–≤–∏–º (–ø–µ—Ä–µ)–≤–µ–±—Ö—É–∫
    await app_tg.bot.delete_webhook(drop_pending_updates=True)
    await app_tg.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
    log.info("Webhook set to %s", WEBHOOK_URL)

    # –î–µ—Ä–∂–∏–º —Ü–∏–∫–ª –∂–∏–≤—ã–º
    while True:
        await asyncio.sleep(3600)

def _thread_target() -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–¥–∞: —Å–≤–æ–π event loop –¥–ª—è PTB."""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.create_task(_async_start_bot())
        loop.run_forever()
    except Exception:
        log.exception("Background loop crashed")

def ensure_bot_started() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏/–∏–º–ø–æ—Ä—Ç–µ."""
    global _bot_started
    if _bot_started:
        return
    with _bot_lock:
        if _bot_started:
            return
        t = threading.Thread(target=_thread_target, name="ptb-thread", daemon=True)
        t.start()
        _bot_started = True
        log.info("PTB background thread started")

# –°—Ç–∞—Ä—Ç—É–µ–º –±–æ—Ç–∞ –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ (—á—Ç–æ–±—ã –∫ –ø–µ—Ä–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É —É–∂–µ —É—Å–ø–µ–ª –ø–æ–¥–Ω—è—Ç—å—Å—è)
ensure_bot_started()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FLASK ROUTES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app_flask.route("/", methods=["GET"])
def health() -> tuple[str, int]:
    return "OK", 200

@app_flask.route(WEBHOOK_PATH, methods=["POST"])
def webhook_handler():
    """–ü—Ä–∏—ë–º –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é."""
    ensure_bot_started()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return abort(403)

    # –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ (—É–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è)
    if not _bot_ready.wait(timeout=30):
        log.error("Webhook got request, but bot is not ready yet")
        return "ok", 200

    try:
        data = request.get_json(force=True, silent=False)
        if not data or not app_tg:
            return "ok", 200

        update = Update.de_json(data, app_tg.bot)
        app_tg.update_queue.put_nowait(update)
        return "ok", 200
    except Exception:
        log.exception("Error in webhook_handler")
        return "ok", 200
